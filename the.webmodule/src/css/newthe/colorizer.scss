
@mixin colorize($schema,$bordered : false, $active:false, $progressable:false){
        $cl : skin(vars contrastlimit);
        $backcolconfig : map_safe($schema,backcolor,light);
        $backcolorname : $backcolconfig;
        $ldstep : skin(vars ldstep,10%);

        @if type_of($backcolconfig)=="list" {
          $backcolorname: nth($backcolconfig,2);
        }

        $defcolor : color($backcolorname,'text');
        $backcolor : color($backcolorname);
        $color : color(map_safe($schema,color,$defcolor));
        @if $color ==  false {
                @debug  ($schema,$defcolor,$backcolorname);
        }
        @if $progressable {
                $hovercolor: color(map_safe($schema, hoverback, slighten($backcolor, $ldstep * 2)));
                $d: $backcolor;
                $l: $hovercolor;
                $l1: lighten($l, 2%);
                $l2: lighten($l, 4%);
                $l3: lighten($l, 8%);
                $l4: lighten($l, 10%);
                $l5: lighten($l, 12%);
                $l6: lighten($l, 14%);
                @include keyframes(progress_#{$backcolorname}) {
                        0% {background-position: 0% 0%;}
                        100% {background-position: 1000px 0%;}
                }
                &.progress{
                        position: relative;
                }
                &.progress::after  {
                                position: absolute;
                        top:0px;
                        left: 0px;
                        width:100%;
                        height: 100%;
                        content:" ";
                                display: block;
                        background-image: url('progress.png');
                                background-repeat: repeat;
                                animation-name: progress_#{$backcolorname};
                                -webkit-animation-name: progress_#{$backcolorname};
                                opacity: 0.4;
                                animation-duration: 15s;
                                -webkit-animation-duration: 15s;
                                animation-timing-function: linear;
                                -webkit-animation-timing-function: linear;
                                animation-iteration-count: infinite;
                                -webkit-animation-iteration-count: infinite;

                }
        }

        color :$color;
        @if type_of($backcolorname)=="string" {
                background-color: $backcolor;
        }@else {
                background : gradient($backcolorname);
        }

        &.title {
                color : $backcolor;
                background-color: inherit;
        }

        $border : solid 1px darken($backcolor,$ldstep);
        $cborder : solid 1px darken($backcolor,$ldstep * 3);
        $lborder : solid 1px darken(slighten($backcolor,40%),$ldstep /2);
        $bsuffix : if(map_safe($schema,border) or $bordered, "",".bordered");

        &#{$bsuffix},&.button {
                border : $border;
                &.title{
                        border : none;
                        border-bottom: $border;
                }
                &.checker{
                        border :  $lborder ;
                }
                &.checked{
                        border :$border;
                }

        }


        &.checker {

                color :$color;
                @if type_of($backcolorname)=="string" {
                        background-color: $backcolor;
                }@else {
                        background : gradient($backcolorname);
                }
                &.semaphore {
                        color : if(iswhite(lighten($backcolor,20%)), color(l_dark),$backcolor);
                        background-color: slighten($backcolor,40%);
                }
        }

        &.checked {
                color : if(iswhite(lighten($backcolor,20%)), color(l_dark),$backcolor);
                background-color: slighten($backcolor,40%);
                &.semaphore {
                        color :$color;
                        @if type_of($backcolorname)=="string" {
                                background-color: $backcolor;
                        }@else {
                                background : gradient($backcolorname);
                        }
                }
        }

        $asuffix :if(map_safe($schema,active) or $active, "",".active");
        &#{$asuffix},&.button, &.menuitem {
                @include user-select(none);
                cursor: pointer;
                &:hover {
                        $hovercolor : color( map_safe($schema,hoverback,slighten($backcolor,$ldstep * 2)));
                        $cl : if(requiredark($hovercolor), color(dark), color(light));
                        color : $cl;
                        background-color: $hovercolor;
                        &.title {
                                background-color: inherit;
                                color : $hovercolor;
                        }
                        &#{$bsuffix}{
                                border-top-color : darken($hovercolor,$ldstep);
                                border-bottom-color : darken(darken($backcolor,$ldstep ),$ldstep);
                        }
                        &:active {
                                @if (map_safe($schema,activeback)){
                                        background: color(map_safe($schema,activeback));
                                        color : color(light);
                                        @if requiredark(color(map_safe($schema,activeback))){
                                                color : color(dark);
                                        }
                                }@else {
                                        background: linear-gradient(to bottom,
                                                slighten($backcolor, $ldstep /2) slighten($backcolor, $ldstep)
                                        );
                                        &.title {
                                                color: slighten($backcolor,$ldstep ) !important;
                                                background-color: inherit !important;
                                        }

                                }

                                &#{$bsuffix}{
                                        border-top-color : darken(slighten($backcolor,$ldstep /2),$ldstep);
                                        border-bottom-color : darken(slighten($backcolor,$ldstep ),$ldstep);
                                }
                        }
                }

        }


}
@mixin colorschema($basis,$bordered:false,$active:false,$gradient:false) {
        $schema : $basis;
        $schemaname : if(map_has_key($schema,schema),map_get($schema,schema),false);
        @if $schemaname {
                $schema : skin((schemas, $schemaname),(backcolor : $schemaname));
        }
        @include colorize($schema,$bordered,$active,$gradient);
}

@mixin defaultschemas($bordered:false,$active:false,$prefix:"") {

        @each $n in $basecolors {
                .i#{$n}{
                        color : color($n);
                }
                #{$prefix}.#{$n} {
                        @include colorschema((schema:$n),$bordered,$active,true);
                }
                #{$prefix}.#{$n}.soft {
                        @include colorschema((schema:l_#{$n}),$bordered,$active,false);
                }
                #{$prefix}.#{$n}.strong {
                        @include colorschema((schema:d_#{$n}),$bordered,$active,false);
                }
        }
}