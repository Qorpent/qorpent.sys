
@function skin($nameorlist, $default:false){
  @if type_of($nameorlist) == 'string'{
    @if map_has_key($skin,$nameorlist) {
      @return map_get($skin,$nameorlist);
    }
    @return $default;
  }
  $current : $skin;
  @for $i from 1 through length($nameorlist) - 1 {
    $n  : nth($nameorlist,$i);
    @if map_has_key($current,$n) {
      $current : map_get($current,$n);
      @if type_of($current)!='map'{
        @return $default;
      }
    }@else  {
      @return $default;
    }
  }
  $n : nth($nameorlist,length($nameorlist));
  @if map_has_key($current,$n) {
    @return map_get($current,$n);
  }
  @return $default;
}
@function updskin($name, $update){
  @return  map_merge($skin,($name:map_merge(skin($name),$update)));
}
@function color ($name, $goal:false, $default: false){
  @if type_of($name)=='color' {
    @return $name;
  }
  @if not $default {
    $default : skin(colors $name)
  }

  @if $goal {
    $name : #{$name}_#{$goal};
  }

  @return skin(colors $name, $default);
}

@function gradient ($gradientlist) {
  $result : "linear-gradient(";
  $result : $result + nth($gradientlist,1) + ",";
  @for $i from 2 through length($gradientlist) {
    $result : $result + color(nth($gradientlist,$i),nth($gradientlist,$i));
    @if $i != length($gradientlist) {
      $result : $result + ",  ";
    }
  }
  $result : $result+")";
  @return unquote($result);
}

@function map_safe($map,$n,$default:false){
  @return if(map_has_key($map,$n),map_get($map,$n  ),$default);
}
@function isyellow($color){
  @return ((red($color) / (blue($color)+0.01)   ) >= 2)
  and ((green($color) /(blue($color)+0.01) ) >=2)
  and (abs(red($color)- green($color))  < 40);
}


@function requiredark($color){
  @return isyellow($color) or lightness($color) > skin(vars contrastlimit, 60) ;
}

@function iswhite($color){
  @return red($color) >=247 and blue($color) >=247 and green($color) >=247;
}

@function slighten($color,$percent) {
  $result : lighten($color,$percent);
  @if not iswhite($result) {
    @return $result;
  }
  @each $i in (0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.025) {
    $result : lighten($color,$percent * $i);
    @if  not iswhite($result) {
      @return $result;
    }
  }
  @return $result;
}


@if global_variable_exists(skin) {

  $basecolors: map_keys(skin(colors)) !global;
  $ldstep: skin(vars ldstep);

  $lmain: skin(vars lmain, skin(vars ldmain, 20%));
  $dmain: skin(vars dmain, skin(vars ldmain, 20%));
  @each $bn in $basecolors {
    $b: color($bn);
    $skin: updskin(colors, (l0_#{$bn}:slighten($b, $ldstep), d0_#{$bn}:darken($b, $ldstep)));
    $skin: updskin(colors, (l1_#{$bn}:slighten($b, $ldstep*2), d1_#{$bn}:darken($b, $ldstep*2)));
    $skin: updskin(colors, (l2_#{$bn}:slighten($b, $ldstep*3), d2_#{$bn}:darken($b, $ldstep*3)));
    $skin: updskin(colors, (l3_#{$bn}:slighten($b, $ldstep*4), d3_#{$bn}:darken($b, $ldstep*4)));
    $skin: updskin(colors, (l_#{$bn}:slighten($b, $lmain), d_#{$bn}:darken($b, $dmain)));
  }
  $d: color(dark);
  $l: color(light);
  $t: skin(vars contrastlimit);


  @each $bn in $basecolors {
    $b: color($bn);
    $lb: color(l_#{$bn});
    $db: color(d_#{$bn});
    $bt: if(requiredark($b),$d,$l);
    $lbt: if(requiredark($lb),$d,$l);;
    $dbt: if(requiredark($db),$d,$l);;

    $skin: updskin(colors, (#{$bn}_text:$bt));
    $skin: updskin(colors, (l_#{$bn}_text:$lbt));
    $skin: updskin(colors, (d_#{$bn}_text:$dbt));
  }

  @each $bn in $basecolors {
    $b: color($bn);
    @each $tn in $basecolors {
      $t: color($tn);
      @if $b != $t {
        $skin: updskin(colors, (#{$bn}#{$tn}:mix($b, $t)));
      }
    }
  }

  $sm : skin(screen sm,1100px);
  $md : skin(screen md,1600px);
  $mediasm : unquote(" screen and (max-width:  #{$sm})") !global;
  $medialg : unquote(" screen and (min-width:  #{$md})") !global;

  @if map_has_key($skin, overridecolors){
    $skin :updskin(colors, map_get($skin,overridecolors));
  }
}

