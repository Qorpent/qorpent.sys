{style:float:right;}Языки BXL/B# - руководство{style}
{style:float:left;}Интерполяция{style}
[bx-index Вернуться к оглавлению]


= Интерполяция

Интерполяция крайне мощный и важнейший инструмент в B# 

По сути интерполяция это основной вариант ***оператора*** в языке

Интерполяция позволяет вшить значния атрибутов класса в другие атрибуты и элементы, при этом интерполяция взаимодейтсвует как со стеком элементов XML, так и со стеком наследования классов B#

== Простая интерполяция

Интерполяция синтаксически выражается ${CODE(,ALT)*(:DEFAULT)} где 

"Простой" мы назовем такой вариант интерполяции, который разрешается в рамках одного класса, на уровне его атрибутов, без учета наследования


% $ - якорный символ (в некоторых случаях это не знак доллара)
% CODE - это код подстановки из контекста
% ALT - набор альтернативных подстановок
% DEFAULT  - значение по умолчанию



[[code]]
class human
	f = "Иванов"
	i = "Петр"
	o = "Осипович"
	fio = "${f} ${i} ${o}"
[[/code]]
[[script-last type=bsharp]]

Пустые значения исчезают из интерполяции

[[code]]
class human
	f = "Иванов"
	i = "Петр"
	fio = "${f} ${i} ${o}"
[[/code]]
[[script-last type=bsharp]]

Однако можно указать значения по умолчанию через символ ":"

[[code]]
class human
	f = "Иванов"
	fio = "${f} ${i:NONAME} ${o}"
[[/code]]
[[script-last type=bsharp]]

В этом примере - отчество остается пустым, но пустое имя замещается значением по умолчанию

Также можно указать перебор вариантов, раздедленный запятыми, в этом случае используется первый не-пустой вариант


[[code]]
class example_1
	a = 1
	b = 2
	c = 3
	fio = "${a,b,c} ${b,c,a} ${c,b,a}"
class example_2
	b = 2
	c = 3
	fio = "${a,b,c} ${b,c,a} ${c,b,a}"
[[/code]]
[[script-last type=bsharp]]

Ничто не мешает использовать одни интерполированные атрибуты в других


[[code]]
class human
	f = "Иванов"
	i = "Петр"
	o = "Осипович"
	fio = "${f} ${i} ${o}"
	year = 1960
	fullinfo = "Гражданин ${fio} ${year} г.р."
[[/code]]
[[script-last type=bsharp]]

== Интерполяция в иерархии элементов

Внутри класса также возможно использование интерполяций

[[code]]
class Sum x=1 y=2
	expression 1
		first val=${x}
		second val=${y}
		sum = "${x}+${y}"
[[/code]]
[[script-last type=bsharp]]

Внутренние элементы "видят" родительские.

Но могут их и перекрыть (обратите внимание на expression 2 - y остается неизменным, а x меняется)

[[code]]
class Sum x=1 y=2
	expression 1
		first val=${x}
		second val=${y}
		sum = "${x}+${y}"
	expression 2 x=10
		first val=${x}
		second val=${y}
		mult = "${x}*${y}"
[[/code]]
[[script-last type=bsharp]]

== Обращение к атрибутам в стеке вложенности элементов

Но также поддерживается и прямое обращение к более базовым атрибутам с тем же именем при помощи субдирективы ".":

[[code]]
class Tree x=1
	leaf ${x}
	node x=2
		leaf ${x}
		node x=3
			leaf ${x}
			leaf ${.x}
			leaf ${..x}
			leaf ${x}${.x}${..x}
[[/code]]
[[script-last type=bsharp]]

Семантика точки соответствует выражению "как можно более ранний атрибут с этим именем, если пропустить количество их вариантов по количеству точек" это количество может отличаться от уровня вложености, при этом если так "далеко" ничего нет, берет "макисмально дальний" например:

[[code]]
class Tree x=1
	node
		node 
			node x=2
				leaf ${x}
				leaf ${.x}
				leaf ${....x}
[[/code]]
[[script-last type=bsharp]]

% Первый "лист" имеет код (2) - это ближайший к нему x
% Второй лист пропускает одно значение x и берет следующее - это будет (1)
% Третий лист пытается пройти дальше, но так как больше нет уровней, где был бы x, он тоже довольствуется (1)

== Интерполяция и наследование

При наследовании, классы сначала объединяются в словарь атрибутов, который выступает для интерполяции логическим "базовым" элементом. При этом интерполяция производится ***после*** наследования, то есть все дочерние классы получают ***неинтерполированное*** "сырое" значение атрибута

Сначала наш простой пример
[[code]]
class human name="Гражданин ${f} ${i} ${o} ${y} г.р." abstract
human GGV f="Георгиев" i="Гарик"
human NPA f="Никифорова" i="Паэлла" o="Аксиевна" y=1984
[[/code]]
[[script-last type=bsharp]]

Ниже представлен некий шаблонизатор выражений
[[code]]
class A x=1 y=2 expr="${x}+${y}" abstract
class B x=(${a}*${b}) y=(${z}+${u}) abstract
	import A
class C a=1 b=2 z=3 u=4
	import B
[[/code]]
[[script-last type=bsharp]]


Интерполяция с "." позволяет "перекрывать" атрибуты

[[code]]
class human name="Гражданин ${f} ${i} ${o} ${y} г.р." abstract
human GGV f="Георгиев" i="Гарик" name="${.name} (это наш бухгалтер)"
human NPA f="Никифорова" i="Паэлла" o="Аксиевна" y=1984 name="${.name} (это наш экономист)"
[[/code]]
[[script-last type=bsharp]]

Но простая "рекурсия" значения самого на себя приведет к ошибке B#


[[code]]
class human name="Гражданин ${f} ${i} ${o} ${y} г.р." abstract
human GGV f="Георгиев" i="Гарик" name="${name} (это наш бухгалтер)"
human NPA f="Никифорова" i="Паэлла" o="Аксиевна" y=1984 name="${name} (это наш экономист)"
[[/code]]
[[script-last type=bsharp]]

По сути автоссылка интерполяции на саму себя приведет к тому, что она не срабатывает

== Статические классы

Статические классы нужны (как и в любом другом языке), чтобы гарантировать, что его состояние в рамках наследования/использования и при компиляции остается неизменным

Статические классы помечаются директивой static

Статические классы в контексте B# это классы, которые обладают следующими свойствами:

№ Статические классы компилируются ДО всех прочих и соответственно все их значения интерполируются
№ При наследовании от статического класса используются не "сырые" значения атрибутов, а интерполированные

[[code]]
class base s="${x} ${y}"  abstract 
base usual x=10 y=20   # обычный наследник
base isstat x=10 y=20 static 
usual A y=30 # наследник обычного класса
isstat B y=30 # наследник статического класса
[[/code]]
[[script-last type=bsharp]]

Обратите внимвние - несмотря на одинаковое свойство y=30 классы A и B имеют разные атрибуты s, так как A его унаследовал в неинтерполированном виде с ${...}, а второй унаследовал его у ранее откомпилированного статического класса

/ Статические классы как языковая структура является неочевидной при разработке, настоятельно рекомендуем не пользоваться директивой static без особой нужды, static используется внутри системы B# для решения ряда задач, например обеспечения шаблонных классов (см. ниже)

== Интерполяция в именах атрибутов

Не только значения, но и имена атрибутов можно интерполировать, однако эта возможность не должна использоваться помимо сценариев, связанных с шаблонными классами, хотя технически такая возможность есть:

[[code]]
class A x=1 y${x}=23
class B x=2 
	import A
[[/code]]
[[script-last type=bsharp]]

Как можно легко увидеть - с одной стороны у нас есть y1=23, как следует из класса А, но с другой стороны у нас нет ожидаемого y2=23, так как атрибуты при интерполяции при наследовании сводятся в словарь, в котором уже нет интерполяции


== Шаблонные классы

Реальное применение статические классы и интреполяция имен находит в шаблонных классах.

Шаблонные классы позволяют определить шаблон именования класса и при импорте опредеить их.

Для использования шаблонных классов сначала создается абстрактный шаблон в именах которого присуствует интерполяция с символом "`" (обратная одинарная кавычка в качестве ключа)

[[code]]
class myTemplate x`{idx}=0 y`{idx}=0 abstract
[[/code]]

idx в данном случае это некая индексная переменная 

Теперь мы можем при помощи конструкции generic создать конкретные шаблонные классы (для системы они будут generic static embed abstract)

[[code]]
class myTemplate x`{idx}=0 y`{idx}=0 abstract
myTemplate A idx=1 generic
myTemplate B idx=2 generic
myTemplate C idx=3 generic
[[/code]]

И теперь мы можем создать класс, содержащий в себе все атрибуты
[[code]]
class myTemplate x`{idx}=0 y`{idx}=0 abstract
myTemplate A idx=1 generic
myTemplate B idx=2 generic
myTemplate C idx=3 generic
class MyMain
	x3=23
	y2=25
	import A
	import B
	import C
[[/code]]
[[script-last type=bsharp]]

/ Шаблонные классы это редко применяемый вариант описания модели настоятельно рекомендуем не злоупотреблять ни конструкцией generic ни static ни интерполяцией имен - применяйте их только если этого явно требует ваша модель или некий целевой DSL

== Интерполяция во включениях, ссылках и словарях, патчах и генраторах

Здесь мы только отметим, что интерполяция в тех или иных формах производится во многих компонентах языка B#, их рассмотрение будет проводиться в соответствующих разделах

См. далее

%% [bx-bs-privates Приватные атрибуты]