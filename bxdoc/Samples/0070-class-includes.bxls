# Copyright Comdiv 2007-2013
# qorpent.sys B#

###############################################
# ДАННЫЙ ПРИМЕР ПОКАЗЫАЕТ                     #
# ЛОГИКУ РАБОТЫ ПРОСТРАНСТВ ИМЕН			  #
# режим работы с тестом                       #
# Interpolation = true                        #
# BxlSharp = true                             #
###############################################

# в документе 0050 было рассказано о манипуляциях 
# и перекрытиях с классом ДО собственно компиляции 
# но есть и обратная ситуация
# иногда возникает необходимость включить уже готовый класс (точнее его копию)
# в состав другого класса при этом в нужное место
# static для этого не годится, так как класс который включается
# во-первых не обязан знать что его включают, а во-вторых
# импорт статика производится только в корень класса

# улучшение примера из 0020 - показывает как это в целом работает и что позволяет решить
# было
class colset abstract
	
colset onecol 
	col '${colcode}'

onecol colsetPd colcode='Pd' static

onecol colsetB1 colcode='B1' static

class main
	import colsetB1 
	import colsetPd 
	
#стало
class colset abstract
	
colset onecol 
	col '%{_colcode}'

class main
	include onecol body _colcode='Б1'
	include onecol body _colcode='Pd'





# ПРИМЕР СО СЛОЖНЫМ ОБЪЕКТОМ
# итак, сооружаем на B# автомобиль
# есть некое колесо
class coleso abstract
	# но с заготовочкой на "установку куда-то"  и с радиусом
	place='%{_place}' 
	radius='%{_radius}'
# есть вообще фара
class fara price=5000 abstract
	place='%{_place}' # тоже заготовочкой на "установку куда-то"
# ну и есть абстрактная машина (как мы видим мы просто пишем, что нам нужны колеса, 
# никакие коды для этого не нужны
class car abstract
	number ='${_number}'
	kuzov
		fornt
			# мы больше нигде не заботимся о кодах, мы просто ставим фары!!!
			include fara _place=front_left 
			include fara _place=front_right
		bagazhnik if='_bagazh'
	podveska
		# мы больше нигде не заботимся о кодах, мы просто ставим колеса куда надо!!!
		front
			include coleso _place=front_left
			include coleso _place=front_right
		rear
			include coleso _place=rear_left
			include coleso _place=rear_right
	salon
		magnitola if='_magnitola'
	
# и конкретная машина с 13 радиусом колес, без багажника, но с магнитолой
car our_matrix _number='a666aa96'  _radius=13 _magnitola=true
car raz_landcuiser _number='a002aa96'  _radius=20 _magnitola=true _bagazh=true


			
# и опять мы добились читаемости и чистоты кода:
# нам не пришлось плодить ненужных классов колес и потом синхронить их коды
# в машину
# мы можем наделать хоть 100500 машин с любым количеством где угодно установленных
# колес абсолютно не напрягаясь!

# но и это еще не все, есть маленькое замечаение. Допустим возьмем колсеты

class colset abstract
colset A
	col A
	col B
	col C
	
colset B
	include A
	col D
	col E

# очевидно, что мы получаем не совсем что ждем...
colset B
	colset A
		col A
		col B
		col C
	col D
	col E

# а хотим допустим именно просто плоский список колонок
# но и тут есть заготовочка - спец. слово body, которое 
# указывает компилятору не копировать класс целиком, а только
# его внутренности
class colset abstract
colset A
	col A
	col B
	col C
	
colset B
	include A body # теперь все будет как надо !!!
	col D
	col E	
	

	
# таким образом резюмируем уже несколько примеров:
# 1) наследование, пространства имен, статики и интерполяция - предназначены для увязывания 
#    иерархий в рамках одного функционального назначения и работают по принципу объединения шаблонов
# 2) перекрытие  - предназначено для простой коррекции имеющегося кода при адаптации к конкретным условиям
# 3) включения - механизм объединения в комплексы разнородных сущностей
# Все эти механизмы практически исчерпыающим образом закрывают вообще все известные описания
# взаимоувязки сущностей
# Используйте B# и ваща жизнь станет легче! ${Be Sharp!}