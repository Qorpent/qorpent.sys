{style:float:right;}Языки BXL/B# - руководство{style}
{style:float:left;}Глобальные константы B#{style}
[bx-index Вернуться к оглавлению]


= Глобальные константы B#

Как известно, значения в глобальный видимости - считаются неправильным дизайном, особенно для объектно-ориентированных сред.

В B# также считается, что все значения должны быть переданы через базовый класс, при этом ненужные в продуктиве значения должны быть помечены как приваты.

Но в ряде случаев это может оказаться вырожденным дизайном

/ Внимание! В данном разделе используются конструкции, которые не охвачены пока документацией

== Мотивация

Представим себе некую спецификацию на B# в которой имеются константы

[[code]]
class constants
	pi=3.14
	e=2.718
	c=299792458
	k=1.38E-34
	
class circle abstract
	import constants
	eval S # вычисляемые конструкции - выходят за рамки базового описания B#
	eval Lp
	S = "${pi}*${r}*${r}"
	Lp = "2*${pi}*${r}"

circle R13 "Колесо 13 радиуса" r=13
	

[[/code]]
[[script-last type=bsharp]]

Проблемы видны невооруженным глазом:

% все классы, использующие константы вынуждены явно знать и импортировать constants
% итоговый класс засоряется множеством ненужных ему атрибутов
% если переключить константы на приваты, то мы потеряем нормальный класс констант (с видимыми константами) и усложним читаемость итогового класса

== Решение

Именно в таком и только таком случае, когда константы являются явно удобным выражением дизайна B# предлагает конструкцию ***const***, которая объявляет значения в глобальной области.

Естественно, что и в рамках проекта и в рамках одного файла определений констант может быть много

Глобальные константы B# обладают следующими свойствами:

% уникальны - попытки дважды создать одну константу приводят к ошибке
% могут перекрываться, специальная конструкция ***~const*** позволяет явно перекрыть константу в случае необходимости
% могут объявляться "мягко" через специальную конструкция ***+const*** - в этом случае константа будет определена только если не была определена ранее
% участвуют в интерполяции на правах условного "базового класса" однако копирования всех констант в целевой класс не производится, то есть это аналог не базового класса, а ***прототипа*** (в C#/Java такой концепции нет)
% могут содержать собственные интерполяции, разрешаемые в рамках констант


== Использование констант


[[code]]
const
	pi=3.14
	e=2.718
	c=299792458
	k=1.38E-34
	
class circle abstract
	eval S # вычисляемые конструкции - выходят за рамки базового описания B#
	eval Lp
	S = "${pi}*${r}*${r}"
	Lp = "2*${pi}*${r}"

circle R13 "Колесо 13 радиуса" r=13
	
[[/code]]
[[script-last type=bsharp]]


== Контроль уникальности

[[code]]
const 
	x=1
	y=2
	
# где-то в другом файле
const
	x=3
	
class A z=${x}
	
[[/code]]
[[script-last type=bsharp]]

Как мы видим - система сигнализирует о проблеме, хотя и пытается как можно полнее обработать код - атрибут z в классе А все же принял значение константы (первой обработанной компилятором)

== Перекрытие

В отличие от предыдущего примера, константа явно перекрывается - это не считается ошибкой

[[code]]
const 
	x=1
	y=2
	
# где-то в другом файле
~const
	x=3
	
class A z=${x}
	
[[/code]]
[[script-last type=bsharp]]


== Значения по умолчанию

В этом примере использован синтаксис ***+const*** - уже определенные константы не замещаются

[[code]]
const 
	x=1
	y=2
	
# где-то в другом файле
+const
	x=4
	y=5
	z=6
	
class A val="x=${x} ; y=${y} ; z=${z}"
	
[[/code]]
[[script-last type=bsharp]]

== Шаблоны интерполяции как константы

Ничего не мешает определить константы с интерполяциями

[[code]]
const 
	valf="${_v} ${_m}"
	
class A 
	element item
	item length value=${valf} _v=100 _m=km
	item speed value=${valf} _v=80 _m=km/h
	
[[/code]]
[[script-last type=bsharp]]



== Интерполяция между константами

Для интерполяции констант следует использовать интерполяции со знаком тильды в качесте якоря ***~{...}***

[[code]]
const 
	domain = myorg
	protocol = https
	baseurl = "~{protocol}://~{domain}.com"
	
class A url = "${baseurl}/home.html" domain = nomyorg
[[/code]]
[[script-last type=bsharp]]

/ Внимание! Атриубт domain=nomyorg специально добавлен в класс А, чтобы показать, что интерполяция домена в константах произошла до интерполирования в рамках класса