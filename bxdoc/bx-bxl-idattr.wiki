{style:float:right;}Языки BXL/B# - руководство{style}
{style:float:left;}Идентичность элементов в BXL и анонимные атрибуты{style}
[bx-index Вернуться к оглавлению]
= Идентичность элементов в BXL и анонимные атрибуты

Синтаксис BXL атрибутов, в том числе атрибутов идентичности достаточно подробно описан в [bx-bxl-syntax общий синтаксис BXL]

Здесь подробнее остановимся на более точных нюансах

== Мотивация

=== XML не просто текст, а описания неких сущностей, а сущностей есть идентичность.
В отличие от большинства конструкций BXL, атрибуты идентичности и анонимные не являются простым отображением конструкций XML в сжатый синтаксис, а выражают концепии, связанные с направленностью и назначением BXL

/ Точнее, в XML была тенденция узаконить атрибут ID, но она не нашла поддержки со стороны стандарта

Но хотя XML стандарт не подразумевает каких-то атрибутов однозначной идентификации элементов, практически все использования XML его подразумевают

Вот как выглядит типовой файл конфигурации
[[script type=bxl]]
users code=main name='Главный каталог пользователей'
	user id=bvg name='Багрякова Виолетта Григорьевна'
	user id=aft name='Актюбенко Федор Теодорович'
	user id=pan name='Попова Анна Николаевна'
	user id=idp name='Иванова Дарья Петровна'
[[/script]]

Также хрестоматийно использование атрибутов id, name в XHTML
[[script type=bxl]]
form id=mainform
	input id=login_fld type=text name=login
	input id=pass_fld type=password name=_p_a_s_s_
[[/script]]

=== При сценариях кодогенерации и вообще при большом числе флаговых атрибутов XML теряет выразительность

Возьмем тот же пример с пользователями и выставим им атрибут "active"

[[script type=bxl]]
users code=main name='Главный каталог пользователей'
	user id=bvg name='Багрякова Виолетта Григорьевна' active="1"
	user id=aft name='Актюбенко Федор Теодорович' active="true"
	user id=pan name='Попова Анна Николаевна' active="0"
	user id=idp name='Иванова Дарья Петровна' active=""
[[/script]]

Что из этих конструкций обозначает активность? Что обозначает ее отсутствие? Какой формат верен?

/ Исходя из этих особенностей BXL и вводит понятие атрибутов идентичности и флаговых атрибутов - ***идентичность не нуждается в именах***, ***флаги не нуждаются в значении***

== Как это работает в BXL


% Идентичность выражается атрибутами id и code, которые выражают "системный идентификатор" и name, который выражает "читаемое имя"
% Флаговые атрибуты записываются без значений и само их присутствие обозначает их включение, при этом вкл=="1", а явное выключение=="0" , 1 и 0 легко приводимы к true/false и "1" и ""

Вот как выглядит этот пример на BXL
[[code]]
users main 'Главный каталог пользователей'
	user bvg 'Багрякова Виолетта Григорьевна' active
	user aft 'Актюбенко Федор Теодорович' active
	user pan 'Попова Анна Николаевна'
	user idp 'Иванова Дарья Петровна'
[[/code]]
[[script-last type=bxl]]

/ BXL делает атрибуты идентичности "с избытком" - и id и code

Ничто не мешает довыставить атрибуты идентичности вручную, например если id и code должны отличаться:

[[code]]
users main 'Главный каталог пользователей'
	user bvg 'Багрякова Виолетта Григорьевна' active id=2
	user id=3 aft 'Актюбенко Федор Теодорович' active
	user pan code=RTY 'Попова Анна Николаевна'
	user idp 'Иванова Дарья Петровна'
[[/code]]
[[script-last type=bxl]]

/ Причем для BXL атрибуты идентичности обрабатываются всегда по особой гарантированной схеме при которой именованный атрибут вытесняет анонимный

=== Любой атрибут, не связанный с идентичностью прерывает в BXL разбор идентичности

Это важно - ***идентичность всегда предшествует всему остальному***

В следующем примере элементы не идентичны
[[code]]
a x y b=1
a b=1 x y
[[/code]]
[[script-last type=bxl]]

В первом случае анонимные атрибуты x y идут впереди и понимаются как "id,code=x; name=y" а во втором случае они воспринимаются как флаги, так как наличие атрибут b=1 явно указывает, что идентичность уже закончилась

Если BXL неправильно определяет принадлежность атрибутов (используется какая-то своя нотация) ничего не мешает использовать напрямую только именованные атрибуты, вот теперь варианты будут логически идентичны:
[[code]]
a x=1 y=1 b=1
a b=1 x y
[[/code]]
[[script-last type=bxl]]


=== Строковые анонимные атрибуты

Этот вариант анонимных атрибутов самый спорный

Рассмотрим пример:

[[code]]
a c n active
a c n "active"
a c n (active)
[[/code]]
[[script-last type=bxl]]

Только литерал может стать флаговым атрибутом, тот же литерал, но переданный как строка или как выражение трансформируются в значение анонимного  атрибутами

При этом для атрибутов идентичности для простоты их использования такой разницы не существует:

[[code]]
a active    # тут атрибут нахтодится в начале и рассматривается как идентификатор
a "active"
a (active)
[[/code]]
[[script-last type=bxl]]

Более четкий пример:

[[code]]
a b c d
a b c "d"
a "b" "c" d
a "b" "c" "d"
[[/code]]
[[script-last type=bxl]]

Атрибуты идентичности стабильно обрабатываются как атрибуты идентичности

/ В  то же время очевидно, что при трансляции в XML появляются атрибуты с именами, сформированными системой и это не то, что удобно для обработки, более того B# все атрибуты, начинающиеся на "_" рассматриваются как "приватные" и исключаются из итоговой компиляции. Отсюда резюме - анонимные атрибуты следует использоваться ***только*** в качестве атрибутов идентификации (id+code,name) и флагов


== Проблема читаемого имени

Если id/code являются очевидными атрибутами, "читаемое имя" name - часто опускают, если при этом используются флаговые атрибуты за ними надо следить

[[code]]
x a n acitve # есть и код и имя - active - флаг
x a active  # есть только код, а имени нет - active воспринимается как имя
x a active=1 # так система понимает четко
[[/code]]
[[script-last type=bxl]]

/ Вполне возможно, что в будущей версии будет принято решение, что только явные строки с кавычками могут являться значениями для name, но так как это существенно уменьшит обратную совместимость, скорее всего это будет вариант опции парсера, а не поведение по умолчанию
