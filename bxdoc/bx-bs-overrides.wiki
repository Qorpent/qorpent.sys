{style:float:right;}Языки BXL/B# - руководство{style}
{style:float:left;}Перекрытия классов B#{style}
[bx-index Вернуться к оглавлению]


= Перекрытие классов B#

Как известно, в традиционных объектно-ориентированных языках, исходный класс можно унаследовать и переопределить в нем члены класса, но в B# как языке описаний есть и другой варинат перекрытия - перекрытие исходного определения класса, без порождения нового класса.

Для этого в B# есть 2 механизма: 

% перекрытие - переопределение исходного класса
% патчинг - переопределение результирующего класса

Главное их отличие - время срабатываения и влияние на проект.

Перекрытие - срабатывает ***до*** наследования и ***до*** интерполяции и соответственно влияет на ***весь процесс сборки***

Патчинг же, который мы будем рассматривать позже, наоборот срабатывает в качестве одной из самых последних фаз компиляции и работает с уже готовыми откомпилированными классами.

Перекрытия делятся на 2 типа - "принудительные" и "расширительные" - первые во-первых создают класс, даже если его нет и в обязательном порядке устанавливают свои атрибуты,  не замещают атрибуты если они присуствуют в исходном классе.

== Принудительное перекрытие

Принудительное перекрытие начинается с ключевого слова ***~class*** и затем включает в себя имя перекрываемого класса

[[code]]
~class A x=10
[[/code]]
[[script-last type=bsharp]]

Как видно - B# создает принудительно класс, хотя и отмечает это в журнале ошибок (как некритическую ошибку)

Если же класс присуствует, то он будет перекрыт


[[code]]
class A x=20 y=30
~class A x=10
[[/code]]
[[script-last type=bsharp]]

== Расширительное перекрытие
 
Принудительное перекрытие начинается с ключевого слова ***~class*** и затем включает в себя имя перекрываемого класса

[[code]]
+class A x=10
[[/code]]
[[script-last type=bsharp]]

Расширение также создает класс, и это также отмечатеся как некритическая, но ошибка

При наличии класса 

[[code]]
class A x=20 y=30
+class A x=10 z=40 a=20
[[/code]]
[[script-last type=bsharp]]

Как мы видим - расширение не стало менять атрибут x, но выставило z и a

== Множественное перекрытие

В принципе весь класс может быть создан посредством перекрытий

[[code]]
+class A x=10 
+class A y=20 x=5
+class A z=30 x=15
~class A a=40
[[/code]]
[[script-last type=bsharp]]

Однако в этом случае есть некоторая случайность в значениях атрибутов, так как порядок применения расширений будет в таком варианте недетерминировнным

Для управления порядком перекрытий можно использовать специальный атрибут ***priority***, и например мы сможем обеспечить x значение 5 за счет более высокого приоритета перекртия


[[code]]
+class A x=10  priority=30
+class A y=20 x=5 priority=10
+class A z=30 x=15 priority=20
~class A a=40
[[/code]]
[[script-last type=bsharp]]

/ В целом перекрытия предназначены для сценария партицированных классов, которые позволяют расслоить например файл, генерируемый кодогенератором и файл в ручной обработке (на подобие С# partial) и не должны использоваться в других сценариях

== Тело класса 

Тело класса также может быть расширено или перекрыто


Пример расширения 

[[code]]
class A
	my body 1
+class A
	my body 2
[[/code]]
[[script-last type=bsharp]]


Пример принудительного перекрытия 

[[code]]
class A
	my body 1
~class A
	my body 2
[[/code]]
[[script-last type=bsharp]]

Так как управление телом класса путем простой замены или наращивания контента с общей интерполяцией является очень грубым решением, не решающим очень многих задач, в B# предусмотрен механизм ***элементов***, который является аналогом "членов классов" в традиционных объектно-ориентированных языках

См. далее

[bx-bs-elements Элементы классов]

