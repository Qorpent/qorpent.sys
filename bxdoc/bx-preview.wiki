{style:float:right;}Языки BXL/B# - руководство{style}
{style:float:left;}Предисловие{style}
[bx-index Вернуться к оглавлению]

= Предисловие 

== Что такое BXL и B#
BXL/B# - транслируемые языки программирования, предназначенные для написания спецификаций, моделей, описаний, конфигураций.

На входе BXL/B# представляет собой крайне сжатый, простой в понимании и написании код, а на выходе - полноценный XML или JSON

BXL - это просто транслятор XML с очень сжатым и удобным синтаксисом

B# - это объектно-ориентированный язык, построенный поверх BXL, позволяющий формировать сложные структуры и описания путем 
наследования и слияния простых определений

== Зачем?

BXL отвечает на главных 2 вопроса:
% как обеспечить программе настройки и конфигурации на XML или JSON и при этом поручить это пользователям не обучая их ни первому ни второму?
% как обеспечить более дружелюбный языковой интерфейс для XML и JSON с обходом проблемы разделителей, контроля вложенности, форматирования и т.д.

В итоге BXL это эргономичный XML/JSON с упрощенным синтаксисом и встроенными защитами "от дурака"

B# решает другие проблемы:
% как максимально избежать дублирования кода при работе с XML/JSON?
% как обеспечить повторное использование кода (в виде наследования и/или шаблонизации?)
% как обеспечить логическую целостность кода на контекстных ограничениях, без жестких XSchema?
% как обеспечить максимальную ссылочность между документами и внутри документов XML без использования сложных для понимания XPath/XQuery/XLink?
% как обеспечить типовые сценарии использования XML самыми сжатыми средствами?

В итоге B# - это решение для полноценного объектно-ориентированного создания конфигураций, файлов настроек, базиса кодогенерации, XML-представлений реляционных данных, справочников и т.д. и в целом позиционируется как язык для ***создания спецификаций***.

Технически B# не является расширением BXL, он может работать с XML как таковым, но синтаксис B# ориентирован именно на использование BXL в качестве базового транслятора

== Как?

На данный момент реализация включает в себя

№ BXL
№№ базовые интерфейсы, необходимые для расширения и внедрения расположены в пространстве имен Qorpent.Bxl библиотеки Qorpent.Core
№№ в качестве внедряемого в программный код класса BxlParser в составе библиотеки Qorpent.Serialization - для использования в составе приложений
№№ в качестве консольного приложения с именем проекта Qorpent.BxlParser.Exe и именем приложения bxl.exe - для конвертации BXL->XML в файловой системе
№ BSharp
№№ базовые интерфейсы, необходимые для расширения и внедрения расположены в пространстве имен Qorpent.BSharp библиотеки Qorpent.Core
№№ в качестве внедряемого в программный код класса BSharpCompiler в составе библиотеки Qorpent.Serialization - для использования в составе приложений для нативной компиляции BXL/XML кода в виде B#
№№ расширение - бибилиотека для построения целостных проектов на B# - Qorpent.BSharp.Builder
№№ консольный сборщик - Qorpent.BSharp.Builder.Exe с именем приложения bsc.exe
№ Дополнительно
№№ Встраиваемый HTTP сервер Qorpent.Host имеет встроееную команду /toxml, которая в состоянии конвертировать простой BXL и B# код в XML в частности на этой команде построена данная WIKI



