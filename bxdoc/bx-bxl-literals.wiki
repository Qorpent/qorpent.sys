{style:float:right;}Языки BXL/B# - руководство{style}
{style:float:left;}Литералы и строки BXL{style}
[bx-index Вернуться к оглавлению]
= Литералы, строки и выражения BXL

BXL - это XML, XML состоит из элементов, атрибутов и их значений.

В XML существует понятие XName или литерала, имени, которое может использоваться в качестве имени элемента и/или атрибута.

Известно, что оно должно быть валидным литералом, то есть начинаться с буквы или "_", и состоять из цифр, букв и символов "_" , "." и "-", остальное запрещено синтаксисом.

Кроме этого значения атрибутов для XML это именно "строки", которые должны замыкаться в кавычки. При этом XML декларирует 2 вида кавычек ".." и '..'

BXL иначе трактует эти концепции.

В BXL вводится понятие ***литерала***, ***строки*** и ***выражения***.

==Литералы

/ Литерал BXL это ***любое строчное значение без пробелов*** в котором нет следующих символов: ***" ' : \ ( ) = #*** , все остальное в литерале ***разрешено*** 

При этом ***литерал*** может использоваться БЕЗ кавычек как в именах так и в значениях. Посмотрим как это отображается затем в XML

[[code]]
<c++> char*=^string
[[/code]]
[[script-last type=bxl]]

Как вы видите - BXL формирует псевдо-сущности, совместимые с XName и при этом более-менее читаемые глазом (и точно обрабатываемые машинно)

==Строки

Строки в BXL могут содержать любые символы (в том числе ESCAPE-последовательности) и быть многострочными.

Строки не могут использоваться как имена элементов и/или атрибутов.

Для экранирования строк могут применяться двойные кавычки "...", одинарные кавычки '...' и тройные кавычки (многострочные строки) """..."""

/ Знаки <> для BXL НЕ являются символами, требующими экранирования, сущности XML не нужны. В примерах вики нет примеров с подобными атрибутами из-за особенностей поведения WIKI при отрисовке, самого BXL это не касается

[[code]]
x val='a b'
x val="c d"
x val="""f 
g"""
[[/code]]
[[script-last type=bxl]]

ESCAPE-последовательности близки к подобным в C за исключением того, что подстановка кодов символов не поддерживается, так как BXL  по
умолчанию работает с UNICODE вставка символов по кодам не требуется, достаточно скопировать и вставить нужный символ.

[[code]]
x val='a\'b'
x val="c\"d ©Ɽ"
x val="""f
" тут не надо экранировать кавычки '' "
g"""
[[/code]]
[[script-last type=bxl]]

==Выражения
Выражениями в BXL называются строки, выделенные скобками (), отличием этих строк от многострочных строк """ является:

% в отличие от кавычек в строках,скобки выражений ***не удаляются*** из значения, а являются его частью
% BXL ведет счетчик вложенности и открытия и закрытия скобок и запрещает не согласованные выражения
% соответственно выражения - лучшее средство при использовании BXL в кодогенерации, так как в отличие от простого XML обладает встроенным контролем
за корректностью формирования блочных строковых структур

[[code]]
для строк это=допустимо : """
(dsds ) )
"""
[[/code]]
[[script-last type=bxl]]

Но...
[[code]]
для выражений это!=допустимо : (
(dsds ) )
)
[[/code]]
[[script-last type=bxl]]

Но при корректном исполнении :

[[code]]
а так=можно : (
(dsds ) 
)
[[/code]]
[[script-last type=bxl]]

Более сложное выражение:

[[code]]
а так=можно : (
x[i] = (a * 3) + ( x=>{
	return (3* 4);
})
)
[[/code]]
[[script-last type=bxl]]

Но попробуем опечататься...

[[code]]
а так=нельзя : (
x[i] = (a * 3) + ( x=>{
	return (3* 4);
)} # вот тут неверный порядок
)
[[/code]]
[[script-last type=bxl]]


== Таблица соответствий спецсимволов и их замен в именах
[[code]]
# напомню, что "\", "," ,":", '"', "'" - зарезервированные за BXL символы, использование которых в именах не допускается

*:*
.:.
!:!
-:-
+:+
?:?
/:/
<:<
>:>
@:@
^:^
&:&
~:~
`:`
[:[
]:]
{:{
}:}

# внимение! СКОБКИ являются системными символами выражений, но только если находятся В НАЧАЛЕ имени, внутри - их использование допустимо

_(:_(   
_):_)

# отсюда - допустима такая конструкция

bool? x&=^y, z*=23, ^a=([x+1]*func(){return 1;})
[[/code]]
[[script-last type=bxl]]
== Материалы для дальнейшего освоения

% [bx-bxl-qstart Быстрое знакомство с BXL]
% [bx-bxl-syntax Общее определение синтаксиса BXL]
% [bx-bxl-identity Идентичность элементов  в BXL]