{style:float:right;}Языки BXL/B# - руководство{style}
{style:float:left;}Патчи B#{style}
[bx-index Вернуться к оглавлению]


= Патчи

Особенностью динамических объектно-ориентированных языков (Javascript, Python) является, в отличие от статических ОО языков (Java, C#) возможность полного изменения ранее определенных классов и их экземпляров.

В B# заложено несколько вариантов подобного поведения.

С одним из них (перекрытием) вы уже могли ознакомиться [bx-bs-overrides ранее]. 

В этом разделе вы ознакомитесь с не менее мощным инструментом изменения ранее определенного класса - ***патчами***.

В принципе патчи выполняют ту же роль, что и перекрытия и расширения, но с очень существенной разницей - перекрытия применяются до этапа наследования и интерполяции и соответственно срабатывают на раннем этапе сборки класса. Патчи же наоборот, позволяют не внося изменений в процесс компиляции внести изменения в итоговый результат.

Основное назначение патчей - разделение спецификации на "слои" - напрмер слой структуры данных и основных атрибутов и слой локализации, дизайна или адаптации под внешнюю среду в виде патчей к классу. 

Рассмотрим самый простейший пример

[[code]]
class A value=1
	el x value=${.value}2
	el y value=${.value}3
patch "Выставляем имена" for=A set-name="Класс А" value2=23 value=4
	el x "Это элемент X"
	el y "Это элемент Y"
[[/code]]
[[script-last type=bsharp]]

Как мы видим, к исходному классу были применены изменения, которыми отличается патч от исходного класса, именно поэтому инструмент и назывется "патч" так как его применение производится через вычисление DIFF. При этом учитываются только операции добавления и изменения элементов, удалить что-либо при помощи патча нельзя

== Создание элементов при помощи патчей

По умолчанию патч не может создавать новых элементов или подэлементов другого класса, что сделано для гарантий сохранения целостности модели. Так как базовый класс может вести разработчик, а патч - другой разработчик, то нельзя допускать "расползания" кодов элементов.

Например следующий пример выполнится с ошибкой

[[code]]
class A value=1
	el x value=${.value}2
	el y value=${.value}3
patch "Выставляем имена" for=A set-name="Класс А"
	el z "Это элемент Z"
	
[[/code]]
[[script-last type=bsharp]]

В то же время это поведение может быть изменено при помощи директивы ***new=error(default)|create|none***

Например можно указать патчу игнорировать создание элементов  и при этом не рассматривать это как ошибку


[[code]]
class A value=1
	el x value=${.value}2
	el y value=${.value}3
patch "Выставляем имена" for=A set-name="Класс А" new=none
	el z "Это элемент Z"
	
[[/code]]
[[script-last type=bsharp]]


Но также можно и разрешить создание элементов


[[code]]
class A value=1
	el x value=${.value}2
	el y value=${.value}3
patch "Выставляем имена" for=A set-name="Класс А" new=create
	el z "Это элемент Z"
	
[[/code]]
[[script-last type=bsharp]]

== Иерархическая модель: полная

По умолчанию, патчи стараются воспроизводить исходную иерархию и соответственно отображают изменения в иерархии


[[code]]
class A
	el 1
		el 2
			el 3
				el 4
patch for=A
	el 2 x=1
		el 4 x=2
[[/code]]
[[script-last type=bsharp]]

Как видно из примера - патч выполнил соответствующие перестановки

/ Внимание! Встречная перестановка иерархии не поддерживается:

[[code]]
class A
	el 1
		el 2
patch for=A
	el 2
		el 1
[[/code]]
[[script-last type=bsharp]]


== Иерархическая модель, плоская

Во многих случаях полная иерархия неудобна для патчей, особенно  если требуется патчить отдельный элемент на глубоком уровне:

[[code]]
class A
	el 1
		el 2
			el 3
				el 4
					el 5
# наложить патч на el 5 можно только так
patch for=A
	el 1
		el 2
			el 3
				el 4
					el 5 x=2
[[/code]]
[[script-last type=bsharp]]

Для патчей, выполненных в такой модели можно использовать инструкцию ***plain***, которая игнорирует иеррахию и использует только атрибуты идентичности:

[[code]]
class A
	el 1
		el 2
			el 3
				el 4
					el 5
# теперь патч гораздо короче
patch for=A plain
	el 5 x=2
[[/code]]
[[script-last type=bsharp]]


== Множественные патчи

К одному классу может прилагаться несколько патчей с разным режимом создания элементов и разного назначения


[[code]]
class farm
	server http "Внешний открытй HTTP - сервер" 
	server https "Закрытый сервер HTTPS"
	server sql "Внутренний сервер SQL"

patch ports for=farm
	server http port=80
	server https port=443
	server sql port=1433
	
patch mongosrv for=farm new=create
	server mongo "Внутренний сервер MONGODB" port=27018
[[/code]]
[[script-last type=bsharp]]