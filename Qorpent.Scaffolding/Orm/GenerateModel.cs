using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using Qorpent.BSharp;
using Qorpent.Utils.Extensions;

namespace Qorpent.Scaffolding.Orm{
	/// <summary>
	/// Формирует вспомогательный класс адаптера для DataReader
	/// </summary>
	public class GenerateModel: CodeGeneratorTaskBase
	{
		private StringBuilder o;

		/// <summary>
		/// 
		/// </summary>
		public GenerateModel()
			: base()
		{
			ClassSearchCriteria = "dbtable";
			DefaultOutputName = "Orm";
		}

		/// <summary>
		/// 
		/// </summary>
		private const string Header = "/*" + Production.AUTOGENERATED_MASK + "*/\r\n" + @"
//////////////////////////////////////////////////////////////////////
////       AUTO-GENERATED WITH  GeneratePokoClassDataAdapter     ////
//////////////////////////////////////////////////////////////////////
";
		/// <summary>
		/// 
		/// </summary>
		/// <param name="targetclasses"></param>
		/// <returns></returns>
		protected override IEnumerable<Production> InternalGenerate(IBSharpClass[] targetclasses){

			var genfactory = new Production{
				FileName = "Adapters/Model.cs",
				GetContent = ()=>GenerateModelClass()
			};
			yield return genfactory;
		}

		private string GenerateModelClass(){
			o = new StringBuilder();
			var ns = _context.ResolveAll("dbtable").Select(_ => _.Namespace).GroupBy(_ => _).OrderByDescending(_ => _.Count()).First().Key;
			o.AppendLine(Header);
			o.AppendLine("using System;");
			o.AppendLine("#if !NOQORPENT");
			o.AppendLine("using Qorpent.Data;");
			o.AppendLine("#endif");
			o.AppendFormat("namespace {0}.Adapters {{\r\n", ns);
			o.AppendLine("\t///<summary>Model for " + ns + " definition</summary>");
			o.AppendLine("\tpublic partial class Model {");
			GenerateGetAdapterMethods(ns);
			o.AppendLine("\t}");
			o.AppendLine("}");
			return o.ToString();
		}

		private void GenerateGetAdapterMethods(string ns){
			o.AppendLine("\t\t///<summary>Retrieve data adapter by type (generic)</summary>");
			o.AppendLine("#if NOQORPENT");
			o.AppendLine("\t\tpublic object GetAdapter<T>(){");
			o.AppendLine("\t\t\treturn GetAdapter(typeof(T));");
			o.AppendLine("#else");
			o.AppendLine("\t\tpublic IObjectDataAdapter<T> GetAdapter<T>() where T:class,new(){");
			o.AppendLine("\t\t\treturn (IObjectDataAdapter<T>)GetAdapter(typeof(T));");
			o.AppendLine("#endif");
			o.AppendLine("\t\t}");
			o.AppendLine("\t\t///<summary>Retrieve data adapter by type</summary>");
			o.AppendLine("\t\tpublic object GetAdapter(Type objectType){");
			o.AppendLine("\t\t\tswitch(objectType.Name){");
			foreach (var t in _context.ResolveAll("dbtable").OrderBy(_=>_.Name)){
				var tn = t.Name;
				if (t.Namespace != ns){
					tn = t.FullName;
				}
				o.AppendLine("\t\t\t\tcase \"" + tn + "\": return new " + tn + "DataAdapter();");
			}
			o.AppendLine("\t\t\t}");
			o.AppendLine("\t\t\treturn null;");
			o.AppendLine("\t\t}");
		}
	}
}