using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using Qorpent.BSharp;
using Qorpent.Utils.Extensions;

namespace Qorpent.Scaffolding.Orm{
	/// <summary>
	/// Формирует вспомогательный класс адаптера для DataReader
	/// </summary>
	public class GenerateModel: CodeGeneratorTaskBase
	{
		private StringBuilder o;

		/// <summary>
		/// 
		/// </summary>
		public GenerateModel()
			: base()
		{
			ClassSearchCriteria = "dbtable";
			DefaultOutputName = "Orm";
		}

		/// <summary>
		/// 
		/// </summary>
		private const string Header = "/*" + Production.AUTOGENERATED_MASK + "*/\r\n" + @"
//////////////////////////////////////////////////////////////////////
////       AUTO-GENERATED WITH  GenerateModel     ////
//////////////////////////////////////////////////////////////////////
";
		/// <summary>
		/// 
		/// </summary>
		/// <param name="targetclasses"></param>
		/// <returns></returns>
		protected override IEnumerable<Production> InternalGenerate(IBSharpClass[] targetclasses){

			var genfactory = new Production{
				FileName = "Adapters/Model.cs",
				GetContent = ()=>GenerateModelClass()
			};
			yield return genfactory;
		}

		private string GenerateModelClass(){
			o = new StringBuilder();
			var ns = _context.ResolveAll("dbtable").Select(_ => _.Namespace).GroupBy(_ => _).OrderByDescending(_ => _.Count()).First().Key;
			o.AppendLine(Header);
			o.AppendLine("using System;");
			o.AppendLine("#if !NOQORPENT");
			o.AppendLine("using Qorpent.Data;");
			o.AppendLine("#endif");
			o.AppendFormat("namespace {0}.Adapters {{\r\n", ns);
			o.AppendLine("\t///<summary>Model for " + ns + " definition</summary>");
			o.AppendLine("\tpublic partial class Model {");
			GenerateGetAdapterMethods(ns);
			GenerateReferenceBehaviorMarkers(ns);
			o.AppendLine("\t}");
			o.AppendLine("}");
			return o.ToString();
		}
		
		private void GenerateReferenceBehaviorMarkers(string ns){
			var tables = _context.ResolveAll("dbtable").OrderBy(_=>_.Name).ToArray();
			var cmap = tables.ToDictionary(_ => _.Name, _ => _);
			var tmap = tables.ToDictionary(_ => _.Compiled.Attr("fullname"), _ => _);
			foreach (var t in tables){
				foreach (var reference in t.Compiled.Elements("ref")){
					var referto = reference.Attr("to", reference.Attr("to", reference.Attr("code") + ".Id"));
					SetupDirectMarker(t, referto, reference);
					if (reference.Attr("reverse").ToBool()){
						SetupBackCollectionMarker(referto, cmap, tmap, reference, t);
					}
				}
				
			}
		}

		private void SetupDirectMarker(IBSharpClass t, string referto, XElement reference){
			o.AppendLine("\t\t///<summary>Marks active auto foreign key link from " + t.Name + " to " +
			             referto + " with " + reference.Attr("code") + " (" +
			             reference.Attr("name") + ")</summary>");
			o.AppendLine("\t\tpublic bool AutoLoad" + t.Name + reference.Attr("code") + " = "+reference.Attr("auto").ToBool().ToString().ToLowerInvariant()+";");
		}

		private void SetupBackCollectionMarker(string referto, Dictionary<string, IBSharpClass> cmap, Dictionary<string, IBSharpClass> tmap, XElement reference,
		                                       IBSharpClass t){
			var reftable = referto.Substring(0, referto.LastIndexOf('.'));
			IBSharpClass reftablecls = null;
			if (cmap.ContainsKey(reftable)){
				reftablecls = cmap[reftable];
			}
			else if (tmap.ContainsKey(reftable)){
				reftablecls = tmap[reftable];
			}
			else{
				throw new Exception("cannot find corresponding reference in model " + reference.ToString());
			}
			o.AppendLine("\t\t///<summary>Marks active auto collection in " + reftablecls + " of " +
			             t.Name + " with " + reference.Attr("code") + " (" +
			             reference.Attr("name") + ")</summary>");
			var multname = t.Name;
			if (reference.Attr("reverse") != "1"){
				multname = reference.Attr("reverse");
			}
			else{
				if (multname.EndsWith("s")){
					multname += "es";
				}
				else{
					multname += "s";
				}
				if (reference.Attr("code") != reftablecls.Name){
					multname += "By" + reference.Attr("code");
				}
			}
			o.AppendLine("\t\tpublic bool AutoLoad" + reftablecls.Name + multname  + "=" + reference.Attr("reverse-auto").ToBool().ToString().ToLowerInvariant() + ";");
		}

		private void GenerateGetAdapterMethods(string ns){
			o.AppendLine("\t\t///<summary>Retrieve data adapter by type (generic)</summary>");
			o.AppendLine("#if NOQORPENT");
			o.AppendLine("\t\tpublic static object GetAdapter<T>(){");
			o.AppendLine("\t\t\treturn GetAdapter(typeof(T));");
			o.AppendLine("#else");
			o.AppendLine("\t\tpublic static IObjectDataAdapter<T> GetAdapter<T>() where T:class,new(){");
			o.AppendLine("\t\t\treturn (IObjectDataAdapter<T>)GetAdapter(typeof(T));");
			o.AppendLine("#endif");
			o.AppendLine("\t\t}");
			o.AppendLine("\t\t///<summary>Retrieve data adapter by type</summary>");
			o.AppendLine("\t\tpublic static object GetAdapter(Type objectType){");
			o.AppendLine("\t\t\tswitch(objectType.Name){");
			foreach (var t in _context.ResolveAll("dbtable").OrderBy(_=>_.Name)){
				var tn = t.Name;
				if (t.Namespace != ns){
					tn = t.FullName;
				}
				o.AppendLine("\t\t\t\tcase \"" + tn + "\": return new " + tn + "DataAdapter();");
			}
			o.AppendLine("\t\t\t}");
			o.AppendLine("\t\t\treturn null;");
			o.AppendLine("\t\t}");
		}
	}
}