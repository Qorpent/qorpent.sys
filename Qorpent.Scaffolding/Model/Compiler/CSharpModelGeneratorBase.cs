using System.Linq;
using System.Text;
using Qorpent.BSharp;

namespace Qorpent.Scaffolding.Model.Compiler{
	/// <summary>
	/// Базовый класс генераторов модели
	/// </summary>
	public abstract class CSharpModelGeneratorBase : CodeGeneratorTaskBase{
		/// <summary>
		/// 
		/// </summary>
		protected readonly string Header;
		/// <summary>
		/// 
		/// </summary>
		protected StringBuilder o;
		/// <summary>
		/// 
		/// </summary>
		protected PersistentClass[] Tables;

		/// <summary>
		/// 
		/// </summary>
		protected string DefaultNamespce;

		/// <summary>
		/// 
		/// </summary>
		public CSharpModelGeneratorBase()
			: base()
		{
			ClassSearchCriteria = "dbtable";
			DefaultOutputName = "Orm";
			Header = "/*" + Production.AUTOGENERATED_MASK + "*/\r\n" + @"
//////////////////////////////////////////////////////////////////////
////       AUTO-GENERATED WITH  " + GetType().Name + @"     ////
//////////////////////////////////////////////////////////////////////
";
		}

		/// <summary>
		/// 
		/// </summary>
		protected PersistentModel Model { get; set; }

		/// <summary>
		/// 
		/// </summary>
		/// <param name="context"></param>
		public override void Execute(IBSharpContext context){
			this.Model = (PersistentModel) context.ExtendedData[PrepareModelTask.DefaultModelName];
			Tables = Model.Classes.Values.OrderBy(_ => _.Name).ToArray();
			DefaultNamespce = Model.Classes.Values.Select(_ => _.Namespace).First();
			o = new StringBuilder();
			base.Execute(context);
		}

		/// <summary>
		/// 
		/// </summary>
		protected void WriteHeader(){
			o = new StringBuilder();
			o.AppendLine(Header);
			this.IndentLevel = 0;
		}
		/// <summary>
		/// 
		/// </summary>
		protected int IndentLevel { get; set; }

		/// <summary>
		/// /
		/// </summary>
		/// <param name="row"></param>
		protected void Write(string row){
			Indent();
			o.AppendLine(row);
		}
		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <param name="implements"></param>
		protected void Class(string name, params string[] implements){
			Indent();
			o.Append("public partial class " + name);
			if (implements != null && 0 != implements.Length){
				o.Append(" : ");
				o.Append(string.Join(", ", implements));
			}
			o.AppendLine(" {");
			IndentLevel++;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="text"></param>
		protected void Summary(string text)
		{
			Indent();
			o.AppendLine("///<summary>" + text + "</summary>");
		}
		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		protected void ExtensionClass(string name)
		{
			Indent();
			o.AppendLine("public static partial class " + name+" {");
			IndentLevel++;
		}

		/// <summary>
		/// 
		/// </summary>
		protected void Close(){
			if (IndentLevel > 0)
			{
				IndentLevel--;
			}
			Indent();
			o.AppendLine("}");
			
		}

		/// <summary>
		/// 
		/// </summary>
		protected void Indent(){
			for (var i = 0; i < IndentLevel; i++){
				o.Append("\t");
			}
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="ns"></param>
		protected void Namespace(string ns){
			o.AppendLine("namespace " + ns + "{");
			IndentLevel++;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="ns"></param>
		protected void Using(string ns){
			o.AppendLine("using "+ns+";");
		}
	}
}