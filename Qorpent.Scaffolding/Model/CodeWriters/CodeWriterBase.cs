using System.IO;
using System.Linq;

namespace Qorpent.Scaffolding.Model.CodeWriters{
	/// <summary>
	///     Base class for model С# writers
	/// </summary>
	public abstract class CodeWriterBase{
		/// <summary>
		/// </summary>
		protected readonly string Header;

		private readonly bool _selfwriter;

		/// <summary>
		/// </summary>
		protected string DefaultNamespce;

		private bool _generated;


		

		/// <summary>
		/// 
		/// </summary>
		public bool WithHeader;


		/// <summary>
		/// </summary>
		/// <param name="output"></param>
		protected CodeWriterBase(TextWriter output){
			WithHeader = true;
			Header = "/*" + Production.AUTOGENERATED_MASK + "*/\r\n" + @"
//////////////////////////////////////////////////////////////////////
////       AUTO-GENERATED WITH  " + GetType().Name + @"     ////
//////////////////////////////////////////////////////////////////////";
			if (null == output){
				_selfwriter = true;
				o = new StringWriter();
			}
			else{
				o = output;
			}
			DefaultNamespce = "Orm";
		}

		/// <summary>
		/// </summary>
		/// <param name="cls"></param>
		/// <param name="output"></param>
		protected CodeWriterBase(PersistentClass cls, TextWriter output) : this(output){
			Cls = cls;
		}

		/// <summary>
		/// </summary>
		/// <param name="model"></param>
		/// <param name="output"></param>
		protected CodeWriterBase(PersistentModel model, TextWriter output)
			: this(output){
			Model = model;
		}

		/// <summary>
		/// </summary>
		public PersistentClass Cls { get; set; }

		/// <summary>
		/// </summary>
		public PersistentModel Model { get; set; }

		/// <summary>
		/// </summary>
		protected TextWriter o { get; set; }

		/// <summary>
		/// </summary>
		protected PersistentClass[] Tables { get; set; }

		/// <summary>
		/// </summary>
		protected int IndentLevel { get; set; }

		/// <summary>
		/// </summary>
		public void Run(){
			if (_generated) return;
			Prepare();
			InternalRun();
			_generated = true;
		}

		private void Prepare(){
			if (null != Model){
				Tables = Model.Classes.Values.OrderBy(_ => _.Name).ToArray();
				DefaultNamespce = Model.Classes.Values.Select(_ => _.Namespace).First();
				
			}
			else{
				Tables = new[]{Cls};
				DefaultNamespce = Cls.Namespace;
			}
			if (string.IsNullOrWhiteSpace(DefaultNamespce)){
				DefaultNamespce = "Orm";
			}
		}

		/// <summary>
		/// </summary>
		protected abstract void InternalRun();

		/// <summary>
		/// </summary>
		/// <returns></returns>
		public override string ToString(){
			Run();
			if (_selfwriter) return o.ToString();
			return "//OUTER WRITER USED FOR GENERATION";
		}

		/// <summary>
		/// </summary>
		protected void WriteHeader(){
			if (WithHeader){
				o.WriteLine(Header);
			}
			IndentLevel = 0;
		}

		/// <summary>
		///     /
		/// </summary>
		/// <param name="row"></param>
		protected void Write(string row){
			Indent();
			o.WriteLine(row);
		}

		/// <summary>
		/// </summary>
		/// <param name="name"></param>
		/// <param name="implements"></param>
		protected void Class(string name, params string[] implements){
			Indent();
			o.Write("public partial class " + name);
			if (implements != null && 0 != implements.Length){
				o.Write(" : ");
				o.Write(string.Join(", ", implements));
			}
			o.WriteLine(" {");
			IndentLevel++;
		}

		/// <summary>
		/// </summary>
		/// <param name="text"></param>
		protected void Summary(string text){
			Indent();
			o.WriteLine("///<summary>" + text + "</summary>");
		}

		/// <summary>
		/// </summary>
		/// <param name="name"></param>
		protected void ExtensionClass(string name){
			Indent();
			o.WriteLine("public static partial class " + name + " {");
			IndentLevel++;
		}

		/// <summary>
		/// </summary>
		protected void Close(){
			if (IndentLevel > 0){
				IndentLevel--;
			}
			Indent();
			o.WriteLine("}");
		}

		/// <summary>
		/// </summary>
		protected void Indent(){
			for (int i = 0; i < IndentLevel; i++){
				o.Write("\t");
			}
		}

		/// <summary>
		/// </summary>
		/// <param name="ns"></param>
		protected void Namespace(string ns){
			o.WriteLine("namespace " + ns + "{");
			IndentLevel++;
		}

		/// <summary>
		/// </summary>
		/// <param name="ns"></param>
		protected void Using(string ns){
			o.WriteLine("using " + ns + ";");
		}
	}
}