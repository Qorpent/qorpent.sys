namespace Qorpent.Db

	class BaseObject "Абстрактные определения и константы" abstract
		schema=dbo
		isdataobject = true
		element datatype
		element trigger
		element function
		element view
		datatype int type=Int32
		datatype long type=Int64
		datatype string type=String size=255
		datatype shortstring type=String size=20
		datatype longstring type=String size=400
		datatype text type=String size=-1
		datatype datetime type=DateTime
		datatype decimal type=Decimal size=18 precession=6
		datatype bool type=Boolean
		_timestampstr = "CAST(CAST(CURRENT_TIMESTAMP as float) as char)"
		fullname = "${schema}.${code}"
		

	class Table "Абстрактная таблица" abstract prototype=dbtable
		import BaseObject
		int Id "Локальный уникальный идентификатор" primarykey identity idx=10
		
		
	Table Entity "Сущность" abstract 
		string Code "Уникальный код" unique default="'NOCODE_' + ${_timestampstr}"
		string Name "Название" default="'NONAME_' + ${_timestampstr}"
		datetime Timestamp "Штамп обновления в модели 'версия'" default = CURRENT_TIMESTAMP
		longstring Tag "Теги"

	Entity Dictionary "Определение словаря (с поддержкой иерархии)" abstract
		
		string Value "Значение"
		string SecurityInfo "Некая информация о безопасности"
		string ParentCode "Код родительской сущности" ref="${fullname}.Code" 
		string Path "Полный путь"

		create function "[${schema}].[${.code}_getPath]" 
			int Id "Идентификатор элемента таблицы ${fullname}"
			returns string
			as language=tsql : """
				if ( @Id = -1 ) return '/';
				declare @code nvarchar(255);
				declare @parentcode nvarchar(255);
				select @code = Code, @parentcode = ParentCode from ${fullname} where Id = @Id
				declare @result nvarchar(255) set @result = '/' + @code+ '/' ;
				while ( @parentcode != -1 ) begin
					select @code = Code, @parentcode = ParentCode from ${fullname} where Id = @Id
					@result = '/'+@code + @result
				end
				return @result
			"""
		create trigger "[${schema}].[${.code}_set_path_on_insert]" afterinsert
			as language=tsql : """
				update ${fullname} set Path = [${schema}].[getPath](Id) where Id in (select Id from inserted)
			"""
			
		create trigger "[${schema}].[${.code}_set_path_on_update]" afterupdatecolumns="Code,ParentCode"
			as language=tsql : """
				declare @ids table (id int)
				insert @ids select id from inserted 
				insert @ids select id from ${fullname} src join updated u on src.Path like '%/'+ u.Code+'/%'
				update ${fullname} set Path = [${schema}].[getPath](Id) where Id in (select id from @ids)
			"""
		ensure index "[${schema}].${.code}_by_code_index" unique
			use Code
			includes Name
			includes Tag
		
		ensure index "[${schema}].${.code}_by_path_index" unique
			use Path
			includes Code
			includes Name
			includes Tag
			
		ensure index "[${schema}].${.code}_by_tag_index" unique
			use Path
			includes Code
			includes Name
			includes Tag
		
		