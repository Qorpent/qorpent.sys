using System;
using System.Linq;
using NUnit.Framework;
using Qorpent.Scaffolding.Model;
using Qorpent.Scaffolding.Model.CodeWriters;
using Qorpent.Scaffolding.Model.SqlWriters;
using Qorpent.Utils.Extensions;

namespace Qorpent.Scaffolding.Tests.SqlAndOrm{
	[TestFixture]
	public class TableFunctionsTest{
		private const string SimplestTableFunction = @"
namespace Test
class A persistent
	string X
class B persistent
	string Code 
	A* GetA ""Тест TF"" @code=^B sql-method : (
		insert @result (id) select id from A
	)
";

		private const string SimplestCustomTableFunction = @"
namespace Test
class A persistent
	string Code 
	function GetA ""Тест TF"" returns=""@result  TABLE (Id int)""  : (
		insert @result (id) select id from A
	)
";

		private const string SimplestCustomTableFunctionShort = @"
namespace Test
class A persistent
	string Code 
	function GetA ""Тест TF"" returns=""Id int,Code""  : (
		insert @result (id) select id from A
	)
";
		[Test]
		public void CanParseTableFunction(){
			var model = PersistentModel.Compile(SimplestTableFunction);
			Assert.True(model.IsValid,"Модель должна быть валидна");
			var b = model["B"];
			Assert.NotNull(b,"А где B?");
			var a = model["A"];
			Assert.NotNull(b, "А где A?");
			var geta = b.SqlObjects.FirstOrDefault(_ => _.Name == "GetA") as SqlFunction;
			Assert.NotNull(geta,"Функция должна быть прочитана и инициализирована");
			var dt = geta.ReturnType;
			Assert.True(dt.IsTable, "Тип данных должен быть табличным");
			Assert.AreEqual(a,dt.TargetType,"Тип возвращаемой таблицы должен быть A");
			var arg = geta.Arguments["code"];
			Assert.NotNull(arg,"Должен был считать аргумент @id");
			Assert.True(arg.DataType.IsIdRef,"Тип аргумента должен быть ссылкой на Id");
			Assert.AreEqual(b,arg.DataType.TargetType,"Тип ссылки по ID должен быть B");
			Assert.AreEqual(SqlMethodOptions.IsMethod,geta.SqlMethod);
		}

		/// <summary>
		/// Проверяем генератор SQL
		/// </summary>
		[Test]
		public void SqlGenerationTest(){
			var model = PersistentModel.Compile(SimplestTableFunction);
			var func = model["B"][SqlObjectType.Function, "GetA"];
			var sqlfuncwriter = SqlCommandWriter.Create(func);
			sqlfuncwriter.Dialect = SqlDialect.SqlServer;
			var code = sqlfuncwriter.ToString();
			Console.WriteLine(code);
			Console.WriteLine(code.Replace("\"","\"\""));
			Assert.AreEqual(@"-- begin command SqlFunctionWriter
IF OBJECT_ID('""dbo"".""bGetA""') IS NOT NULL DROP FUNCTION ""dbo"".""bGetA"";
GO
CREATE FUNCTION ""dbo"".""bGetA"" ( @code nvarchar(255) = null  )
RETURNS @result TABLE (""id"" int, ""x"" nvarchar(255)) AS BEGIN
insert @result (id) select id from A
RETURN;
END;
GO".Trim().LfOnly(), code.Trim().LfOnly());
		}

		/// <summary>
		/// Проверяем генератор SQL
		/// </summary>
		[Test]
		public void SqlGenerationTestNoTypeShort()
		{
			var model = PersistentModel.Compile(SimplestCustomTableFunctionShort);
			var func = model["A"][SqlObjectType.Function, "GetA"];
			var sqlfuncwriter = SqlCommandWriter.Create(func);
			sqlfuncwriter.Dialect = SqlDialect.SqlServer;
			var code = sqlfuncwriter.ToString();
			Console.WriteLine(code);
			Console.WriteLine(code.Replace("\"", "\"\""));
			Assert.AreEqual(@"-- begin command SqlFunctionWriter
IF OBJECT_ID('""dbo"".""aGetA""') IS NOT NULL DROP FUNCTION ""dbo"".""aGetA"";
GO
CREATE FUNCTION ""dbo"".""aGetA"" (  ) RETURNS @result TABLE (Id int, Code nvarchar(255)) AS BEGIN
insert @result (id) select id from A
END;
GO".Trim().LfOnly(), code.Trim().LfOnly());
		}

		/// <summary>
		/// Проверяем генератор SQL
		/// </summary>
		[Test]
		public void SqlGenerationTestNoType()
		{
			var model = PersistentModel.Compile(SimplestCustomTableFunction);
			var func = model["A"][SqlObjectType.Function, "GetA"];
			var sqlfuncwriter = SqlCommandWriter.Create(func);
			sqlfuncwriter.Dialect = SqlDialect.SqlServer;
			var code = sqlfuncwriter.ToString();
			Console.WriteLine(code);
			Console.WriteLine(code.Replace("\"", "\"\""));
			Assert.AreEqual(@"-- begin command SqlFunctionWriter
IF OBJECT_ID('""dbo"".""aGetA""') IS NOT NULL DROP FUNCTION ""dbo"".""aGetA"";
GO
CREATE FUNCTION ""dbo"".""aGetA"" (  ) RETURNS @result  TABLE (Id int) AS BEGIN
insert @result (id) select id from A
END;
GO".Trim().LfOnly(), code.Trim().LfOnly());
		}

		/// <summary>
		/// 
		/// </summary>
		[Test]
		public void AdapterGotGeneratedSqlMethod(){
			var model = PersistentModel.Compile(SimplestTableFunction);
			var b = model["B"];
			var adaptgen = new PokoObjectCacheWriter(b);
			var code = adaptgen.ToString();
			Console.WriteLine(code);
			Console.WriteLine(code.Replace("\"", "\"\""));
			Assert.AreEqual(@"/*QPT:::AUTOGENERATED*/

//////////////////////////////////////////////////////////////////////
////       AUTO-GENERATED WITH  PokoObjectCacheWriter     ////
//////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using Qorpent.Data;
using Qorpent.Data.DataCache;
using Test.Adapters;
namespace Test.ObjectCaches {
	///<summary>
	/// Object cache for B
	///</summary>
	public partial class BDataCache : ObjectDataCache<B> {
		///<summary>Creates cache with typed adapter </summary>
		public BDataCache() {
		}
		///<summary>Back reference to model</summary>
		public Test.Adapters.Model Model {get;set;}

		///<summary>Тест TF (Id notation)</summary>
		public A[] GetA (long bId) {
			return Model.A.GetAll (""select id from \""dbo\"".\""bGetA\"" ( '""+bId+""')"");
		}

		///<summary>Тест TF (Code notation)</summary>
		public A[] GetA (string bCode) {
			return Model.A.GetAll (""select id from \""dbo\"".\""bGetA\"" ( '""+bCode+""')"");
		}

		///<summary>Тест TF</summary>
		public A[] GetA (B b) {
			return GetA (b.Id);
		}
	}
}
".Trim().LfOnly(), code.Trim().LfOnly());

		}
	}
}