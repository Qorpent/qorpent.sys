{style:float:right;}Языки BXL/B# - руководство{style}
{style:float:left;}Предисловие{style}
[bx-index Вернуться к оглавлению]

= Предисловие 

== Что такое BXL и B#
BXL/B# - транслируемые языки программирования, предназначенные для написания спецификаций, моделей, описаний, конфигураций.

На входе BXL/B# представляет собой крайне сжатый, простой в понимании и написании код, а на выходе - полноценный XML или JSON

BXL - это просто транслятор XML с очень сжатым и удобным синтаксисом

B# - это объектно-ориентированный язык, построенный поверх BXL, позволяющий формировать сложные структуры и описания путем 
наследования и слияния простых определений

== Зачем?

BXL отвечает на главных 2 вопроса:
% как обеспечить программе настройки и конфигурации на XML или JSON и при этом поручить это пользователям не обучая их ни первому ни второму?
% как обеспечить более дружелюбный языковой интерфейс для XML и JSON с обходом проблемы разделителей, контроля вложенности, форматирования и т.д.

В итоге BXL это эргономичный XML/JSON с упрощенным синтаксисом и встроенными защитами "от дурака"

B# решает другие проблемы:
% как максимально избежать дублирования кода при работе с XML/JSON?
% как обеспечить повторное использование кода (в виде наследования и/или шаблонизации?)
% как обеспечить логическую целостность кода на контекстных ограничениях, без жестких XSchema?
% как обеспечить максимальную ссылочность между документами и внутри документов XML без использования сложных для понимания XPath/XQuery/XLink?
% как обеспечить типовые сценарии использования XML самыми сжатыми средствами?

В итоге B# - это решение для полноценного объектно-ориентированного создания конфигураций, файлов настроек, базиса кодогенерации, XML-представлений реляционных данных, справочников и т.д. и в целом позиционируется как язык для ***создания спецификаций***.

Технически B# не является расширением BXL, он может работать с XML как таковым, но синтаксис B# ориентирован именно на использование BXL в качестве базового транслятора

== Общая схема решения

[bs-architecture.png]

% Все формальные определения, конфигурации выносятся во внешний, относительно приложений проект на B#
% При компиляции - B# компилятор формирует артефакты для использования в целевых приложениях
% Артефакты могут служить 
%% в качестве компонентов самого приложения (как расширение, контент и/или основа его кодогенерации)
%% в качестве источника данных для приложения (как конфигурация или как непосредственные модули данных)

Достоинством данной схемы (в отличие от традиционных DSL,транслируемых в исполнимый код) является то, что на всех этапах и внутреннее и внешнее представление является переносимым, декларативным и стандартным (XML) соответственно использование B# в качестве среды компиляции не накладывает вообще никаких ограничений на характер платформы или приложения - клиента, также не требуется никаких специальных инструментов и серьезных навыков программирования для работы с B#, так как язык является не макро-заменой более низкоуровнего языка программирования, а является формальным описанием исходной модели и равен ей по сложности формирования и восприятия.


== Как?

На данный момент реализация включает в себя

№ BXL
№№ базовые интерфейсы, необходимые для расширения и внедрения расположены в пространстве имен Qorpent.Bxl библиотеки Qorpent.Core
№№ в качестве внедряемого в программный код класса BxlParser в составе библиотеки Qorpent.Serialization - для использования в составе приложений
№№ в качестве консольного приложения с именем проекта Qorpent.BxlParser.Exe и именем приложения bxl.exe - для конвертации BXL->XML в файловой системе
№ BSharp
№№ базовые интерфейсы, необходимые для расширения и внедрения расположены в пространстве имен Qorpent.BSharp библиотеки Qorpent.Core
№№ в качестве внедряемого в программный код класса BSharpCompiler в составе библиотеки Qorpent.Serialization - для использования в составе приложений для нативной компиляции BXL/XML кода в виде B#
№№ расширение - бибилиотека для построения целостных проектов на B# - Qorpent.BSharp.Builder
№№ консольный сборщик - Qorpent.BSharp.Builder.Exe с именем приложения bsc.exe
№ Дополнительно
№№ Встраиваемый HTTP сервер Qorpent.Host имеет встроееную команду /toxml, которая в состоянии конвертировать простой BXL и B# код в XML в частности на этой команде построена данная WIKI
№ Миграция
На данный момент портирования кода на другие платформы не производилось, предварительный анализ показывает, что миграция на Unix без труда осуществляется при помощи Mono (скорее всего не потребуется никаких изменения),  затруднения при портировании на другие языки/платформы могут возникнуть в следующих моментах:
№№ Активно используется System.Xml.Linq (XElement) в качестве промежуточного хранилища XML - при портировании потребуется адаптация под другую имплементацию DOM (JBoss, PyXml module и т.д. в зависимости от языка)
№№ Для увеличения производительности активно используется TPL (Task Parallel Library) - не все платформы имеют внятный встроенный механизм для распараллеливания и где есть часто модель существенно отличается. В этом случае придется отказаться от распараллеливания, что может крайне негативно сказаться на производительности
№№ Остальные моменты не должны вызвать особых затруднений при портировании, очевидными целями порта могут быть Java/Scala, Python, в меньшей степени JavaScript, имплементация на C тоже, конечно возможна, но наверное не оправдана




