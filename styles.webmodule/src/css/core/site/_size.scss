@import "../utils";

@mixin in-size($size,$data) {
  @if type_of($size)=='list' {
    @each $s in $size {
      @include in-size($s, $data);
    }
  } @else {
    $base: skin(sizes default width);
    $corrected: $base;
    $controlled: $base - 1px;
    $form-factor-dynamic: skin(form-factor-dynamic);
    $form-factor-direct: skin(form-factor-direct);

    @if $form-factor-dynamic {
      $base: skin(sizes default width);
      $corrected: $base - 0px;
      $controlled: $base - 1px;
      @each $k, $v in skin(sizes) {
        $base: map_get_default($v, width, skin(sizes default width));
        $corrected: $base - 0px;
        @if map_get_default($v,active,true) and $k==$size {
          @each $s in & {
            $newsel: ();
            $idx: str-index(inspect($s), 'body');
            @if not $idx {
              $newsel: append($newsel, str-insert(inspect($s), 'body.form-factor-dynamic ', 1));
            }@else{
              $newsel: append($newsel, str-insert(inspect($s), '.form-factor-dynamic', $idx+4));
            }

            $newsel: selector-parse($newsel);
            @media screen and (max-width: $controlled) {
              @at-root #{$newsel} {
                @if type_of( $data ) == 'string' {
                  $value: map_get($v, $data);
                  @if type_of($value)=='map' {
                    @each $k, $v in $value {
                      #{$k} : $v
                    }
                  } @else {
                    #{$data}: $value
                  }
                } @else {
                  @each $k, $v in $data {
                    #{$k} : $v
                  }
                }
              }
            }
          }
        }
        $controlled: $base - 1px;
      }
    }

    @if $form-factor-direct {
      @each $k, $v in skin(sizes) {
        @if $k==$size {
          @each $s in & {
            $newsel: ();
            $idx: str-index(inspect($s), 'body');
            @if not $idx {
              $newsel: append($newsel, str-insert(inspect($s), 'body.form-factor-#{$k} ', 1));
            }@else {
              $newsel: append($newsel, str-insert(inspect($s), '.form-factor-#{$k}', $idx+4));
            }
            $newsel: selector-parse($newsel);
            @at-root #{$newsel} {
              @if type_of( $data ) == 'string' {
                $value: map_get($v, $data);
                @if type_of($value)=='map' {
                  @each $k, $v in $value {
                    #{$k} : $v
                  }
                } @else {
                  #{$data}: $value
                }
              } @else {
                @each $k, $v in $data {
                  #{$k} : $v
                }
              }
            }
          }
        }
      }
    }
  }
}

@mixin size($control:1px,$delta:0px,$deltacm:0cm) {
  $base: skin(sizes default width);
  $corrected: $base - $delta;
  $controlled: $base - $control;
  min-width: $corrected;
  max-width: $corrected;
  $baseps: 19cm  - $deltacm;
  $basels: 26cm - $deltacm;

  $form-factor-print: skin(form-factor-print);
  $form-factor-dynamic: skin(form-factor-dynamic);
  $form-factor-direct: skin(form-factor-direct);

  @if $form-factor-print {
    &.form-factor-print {
      main,section,article,header,footer {
        background-color: white;
      }
      box-shadow: none !important;
    }
    @media print {
      main,section,article {
        background-color: white;
      }
      box-shadow: none !important;
    }
    &.form-factor-printps, &.form-factor-print {
      font-family: "Times New Roman" !important;
      background-color:white;
      min-width: $baseps;
      max-width: $baseps;
      min-height: $basels;
      font-size: 10pt;
      padding: 0.5cm;
      @media screen {
        margin-top:20px;
        margin-bottom:20px;
      }
    }
    &.form-factor-printls {
      min-width: $basels;
      max-width: $basels;
      min-height: $baseps;
      font-size: 10pt;
      padding: 0.5cm;
      @media screen {
        margin-top:20px;
        margin-bottom:20px;
      }
    }

    @media print and (orientation: landscape) {
      & {
        font-family: "Times New Roman" !important;
        background-color:white;
        min-width: $basels;
        max-width: $basels;
        font-size: 10pt;

      }
    }

    @media print and (orientation: portrait) {
      & {
        font-family: "Times New Roman" !important;
        background-color:white;
        min-width: $baseps;
        max-width: $baseps;
        font-size: 10pt;
      }
    }
  }
  @if $form-factor-dynamic {
    &.form-factor-dynamic {
      min-width: skin(sizes default width);
      max-width: skin(sizes default width);
      font-size: skin(sizes default font-size);
      @include skin-styles(sizes default);
    }
    @each $k, $v in skin(sizes) {
      $base: map_get_default($v, width, skin(sizes default width));
      $corrected: $base - $delta;
      @if map_get_default($v, active, true) {
        @media screen and (max-width: $controlled) {
          &.form-factor-dynamic {
            min-width: $corrected;
            max-width: $corrected;
            font-size: map_get_default($v, font-size, skin(sizes default font-size));
            @include skin-styles(sizes $k);
          }
        }
      }
      $controlled: $base - $control;
    }

  }

  @if $form-factor-direct {
    &.form-factor-wide {
      min-width: 100%;
      max-width: 100%;
      font-size: skin(sizes wide font-size);
      @include skin-styles(sizes wide);
    }
    @each $k, $v in skin(sizes) {
      $base: map_get_default($v, width, skin(sizes default width));
      $corrected: $base - $delta;

      @if map_get_default($v, active, true) {

        &.form-factor-#{$k} {
          min-width: $corrected;
          max-width: $corrected;
          font-size: map_get_default($v, font-size, skin(sizes default font-size));
          @include skin-styles(sizes $k);
        }
      }
      $controlled: $base - $control;

    }

  }
}