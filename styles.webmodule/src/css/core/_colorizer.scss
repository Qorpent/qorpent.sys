@mixin colored-background($color) {
  background-color: color($color);
  @if requiredark($color) {
    color: color(dark);
  } @else  {
    color: color(light);
  }
}

@mixin inverse-colored-background($color) {
  color: color($color);
  @if requiredark($color) {
    background-color: color(dark);
  } @else  {
    background-color: color(light);
  }
}

@mixin colorize($ajust:0, $style : false) {
  $baseajust : $ajust;
  @each $k, $v in skin(color) {
    $c : $v;
    $a : $baseajust;
    @if $k == light {
      $a : - $a;
    }
    @if $a > 0 {
      $c : slighten($c,$a);
    }@else{
      $c : darken($c, - $a);
    }
    @if $k==disabled {
      &.#{$k}{
        @if $style {
          #{$style} : $c;
        }@else {
          @include colored-background($c);
        }
      }
    }@else {
      &.#{$k}:not(.disabled):not([disabled]){
        @if $style {
          #{$style} : $c;
        }@else {
          @include colored-background($c);
        }
      }
      &.#{$k}.disabled, &.#{$k}[disabled]{
        @include colored-background(default);
      }
    }

  }
}

@mixin std-colors() {
  @each $k, $v in skin(color) {

    .#{$k} {
      @include colored-background($v);
    }
    .#{$k}-light {
      @include colored-background(slighten($v, 20%));
      &.same-color {
        color: darken($v, 20%);
      }
    }
    .#{$k}-darken {
      @include colored-background(darken($v, 20%));
    }

    .inverse-#{$k} {
      @include inverse-colored-background($v);
    }
    .i#{$k} {
      @include inverse-colored-background($v);
    }
    .inverse-#{$k}-light {
      @include inverse-colored-background(slighten($v, 20%));
    }
    .inverse-#{$k}-darken {
      @include inverse-colored-background(darken($v, 20%));
      &.same-color {
        background-color: slighten($v, 20%);
      }
    }
  }
}