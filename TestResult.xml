<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="/home/comdiv/repos/.build/bin/tests/Qorpent.Serialization.Tests.dll" total="653" errors="3" failures="64" not-run="7" inconclusive="0" ignored="7" skipped="0" invalid="0" date="2014-05-26" time="13:39:24">
  <environment nunit-version="2.6.3.0" clr-version="4.0.30319.17020" os-version="Unix 3.2.0.4" platform="Unix" cwd="/home/comdiv/repos/qorpent.sys" machine-name="monodev" user="comdiv" user-domain="monodev" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="Assembly" name="/home/comdiv/repos/.build/bin/tests/Qorpent.Serialization.Tests.dll" executed="True" result="Failure" success="False" time="5.895" asserts="0">
    <results>
      <test-suite type="Namespace" name="Qorpent" executed="True" result="Failure" success="False" time="5.890" asserts="0">
        <results>
          <test-suite type="Namespace" name="Bxl" executed="True" result="Success" success="True" time="0.251" asserts="0">
            <results>
              <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="0.242" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ApplicationAccessToBxl" executed="True" result="Success" success="True" time="0.199" asserts="0">
                    <results>
                      <test-case name="Qorpent.Bxl.Tests.ApplicationAccessToBxl.CanUseBxlFromApplication" executed="True" result="Success" success="True" time="0.191" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="BxlGeneratorTest" executed="True" result="Success" success="True" time="0.042" asserts="0">
                    <results>
                      <test-case name="Qorpent.Bxl.Tests.BxlGeneratorTest.GeneratesNamespacePrefixesTest" executed="True" result="Success" success="True" time="0.036" asserts="1" />
                      <test-case name="Qorpent.Bxl.Tests.BxlGeneratorTest.GeneratesNamespacePrefixesTestWithRoot" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Qorpent.Bxl.Tests.BxlGeneratorTest.WellKnownNamespaceNotCreatedDirectly" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Dsl" executed="True" result="Failure" success="False" time="0.230" asserts="0">
            <results>
              <test-suite type="Namespace" name="Tests" executed="True" result="Failure" success="False" time="0.230" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Json" executed="True" result="Success" success="True" time="0.095" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="LexerTests" executed="True" result="Success" success="True" time="0.069" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="CanCollectSimpleArray" executed="True" result="Success" success="True" time="0.027" asserts="0">
                            <results>
                              <test-case name="Qorpent.Dsl.Tests.Json.LexerTests.CanCollectSimpleArray(String,&quot;a&quot;,2,True)" executed="True" result="Success" success="True" time="0.013" asserts="4" />
                              <test-case name="Qorpent.Dsl.Tests.Json.LexerTests.CanCollectSimpleArray(String,&quot;a&quot;,2,False)" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                              <test-case name="Qorpent.Dsl.Tests.Json.LexerTests.CanCollectSimpleArray(String,&quot;a&quot;,1,False)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Qorpent.Dsl.Tests.Json.LexerTests.CanCollectSimpleArray(Literal,&quot;a&quot;,3,True)" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                              <test-case name="Qorpent.Dsl.Tests.Json.LexerTests.CanCollectSimpleArray(Number,&quot;a&quot;,2,False)" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                              <test-case name="Qorpent.Dsl.Tests.Json.LexerTests.CanCollectSimpleArray(Bool,&quot;a&quot;,1,False)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Qorpent.Dsl.Tests.Json.LexerTests.CanCollectSimpleArray(Null,&quot;a&quot;,1,False)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanCollectSimpleObject" executed="True" result="Success" success="True" time="0.019" asserts="0">
                            <results>
                              <test-case name="Qorpent.Dsl.Tests.Json.LexerTests.CanCollectSimpleObject(Literal,String,&quot;a&quot;,&quot;b&quot;,2,True)" executed="True" result="Success" success="True" time="0.006" asserts="6" />
                              <test-case name="Qorpent.Dsl.Tests.Json.LexerTests.CanCollectSimpleObject(Literal,String,&quot;a&quot;,&quot;b&quot;,2,False)" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                              <test-case name="Qorpent.Dsl.Tests.Json.LexerTests.CanCollectSimpleObject(Literal,String,&quot;a&quot;,&quot;b&quot;,1,False)" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                              <test-case name="Qorpent.Dsl.Tests.Json.LexerTests.CanCollectSimpleObject(String,Literal,&quot;a&quot;,&quot;b&quot;,3,True)" executed="True" result="Success" success="True" time="0.000" asserts="8" />
                              <test-case name="Qorpent.Dsl.Tests.Json.LexerTests.CanCollectSimpleObject(Literal,Number,&quot;a&quot;,&quot;b&quot;,2,False)" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                              <test-case name="Qorpent.Dsl.Tests.Json.LexerTests.CanCollectSimpleObject(Literal,Bool,&quot;a&quot;,&quot;b&quot;,1,False)" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                              <test-case name="Qorpent.Dsl.Tests.Json.LexerTests.CanCollectSimpleObject(String,Null,&quot;a&quot;,&quot;b&quot;,1,False)" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CanReturnSingleValues" executed="True" result="Success" success="True" time="0.009" asserts="0">
                            <results>
                              <test-case name="Qorpent.Dsl.Tests.Json.LexerTests.CanReturnSingleValues(&quot;true&quot;,Bool)" executed="True" result="Success" success="True" time="0.004" asserts="4" />
                              <test-case name="Qorpent.Dsl.Tests.Json.LexerTests.CanReturnSingleValues(&quot;l123&quot;,Literal)" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                              <test-case name="Qorpent.Dsl.Tests.Json.LexerTests.CanReturnSingleValues(&quot;123&quot;,String)" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                              <test-case name="Qorpent.Dsl.Tests.Json.LexerTests.CanReturnSingleValues(&quot;123&quot;,Number)" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                            </results>
                          </test-suite>
                          <test-case name="Qorpent.Dsl.Tests.Json.LexerTests.NestedObjects" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ParserTest" executed="True" result="Success" success="True" time="0.020" asserts="0">
                        <results>
                          <test-case name="Qorpent.Dsl.Tests.Json.ParserTest.MainParserTest" executed="True" result="Success" success="True" time="0.008" asserts="1" />
                          <test-case name="Qorpent.Dsl.Tests.Json.ParserTest.TokenizerTest" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="Qorpent.Dsl.Tests.Json.ParserTest.XmlTest" executed="True" result="Success" success="True" time="0.005" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="XmlInclude" executed="True" result="Failure" success="False" time="0.131" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="XmlIncludeMainTest" executed="True" result="Failure" success="False" time="0.130" asserts="0">
                        <results>
                          <test-case name="Qorpent.Dsl.Tests.XmlInclude.XmlIncludeMainTest.OnDiskTest" executed="True" result="Failure" success="False" time="0.043" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 38 but was 130. Strings differ at index 0.
  Expected: "near\next2\nnear2\nZ x=1\n\ty=2\nZ2 x=3\n\ty=2"
  But was:  "include near.bxl\ninclude "../ext/ext.bxl"\nZ x=3\n\timport impor..."
  -----------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Dsl.Tests.XmlInclude.XmlIncludeMainTest.OnDiskTest () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Dsl.Tests.XmlInclude.XmlIncludeMainTest.Replace_Test" executed="True" result="Failure" success="False" time="0.006" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 22 but was 42. Strings differ at index 0.
  Expected: "e : ZB\n\tt=ZA\n\tb\n\t\tu=ZC"
  But was:  "replace "x+" : Z\ne : xB\n\tt=xxxA\n\tb\n\t\tu=xxC"
  -----------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Dsl.Tests.XmlInclude.XmlIncludeMainTest.Replace_Test () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Dsl.Tests.XmlInclude.XmlIncludeMainTest.SafeImportAndCommonImport" executed="True" result="Failure" success="False" time="0.004" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 23 but was 101. Strings differ at index 5.
  Expected: "e1 x=2\n\ty=2\ne2 x=3\n\ty=2"
  But was:  "e1 x=3\n\timport "direct//simp" : "//*[@code='A']"\ne2 x=3\n\tsafe..."
  ----------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Dsl.Tests.XmlInclude.XmlIncludeMainTest.SafeImportAndCommonImport () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Dsl.Tests.XmlInclude.XmlIncludeMainTest.Self_Import_With_Replace_Test" executed="True" result="Failure" success="False" time="0.003" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 25 but was 68. Strings differ at index 18.
  Expected: "...=CODE\ne y\n\tmy=TEST"
  But was:  "...=CODE\ne y\n\timport self : "//*[@id='x']"\n\t\treplace="CODE=TEST""
  ----------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Dsl.Tests.XmlInclude.XmlIncludeMainTest.Self_Import_With_Replace_Test () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Dsl.Tests.XmlInclude.XmlIncludeMainTest.Self_Include_Test" executed="True" result="Failure" success="False" time="0.002" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 12 but was 38. Strings differ at index 9.
  Expected: "e x\ne y\n\te x"
  But was:  "e x\ne y\n\tinclude self : "//*[@id='x']""
  -----------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Dsl.Tests.XmlInclude.XmlIncludeMainTest.Self_Include_Test () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Dsl.Tests.XmlInclude.XmlIncludeMainTest.Self_Include_With_Replace_Test" executed="True" result="Failure" success="False" time="0.002" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 31 but was 69. Strings differ at index 18.
  Expected: "...CODE\ne y\n\te x\n\t\tmy=TEST"
  But was:  "...CODE\ne y\n\tinclude self : "//*[@id='x']"\n\t\treplace="CODE=TEST""
  ---------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Dsl.Tests.XmlInclude.XmlIncludeMainTest.Self_Include_With_Replace_Test () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Dsl.Tests.XmlInclude.XmlIncludeMainTest.SimpleIncludeWithBxlAndDirectContent" executed="True" result="Failure" success="False" time="0.002" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 33 but was 134. Strings differ at index 2.
  Expected: "e1 w=2, z=1\n\tinclA x=1\n\tinclD x=2"
  But was:  "e1\n\tinclude "direct//inclA"\n\tinclude "direct//inclD", delay\n\t..."
  -------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Dsl.Tests.XmlInclude.XmlIncludeMainTest.SimpleIncludeWithBxlAndDirectContent () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Dsl.Tests.XmlInclude.XmlIncludeMainTest.SimpleIncludeWithBxlAndDirectContent_Recursive" executed="True" result="Failure" success="False" time="0.002" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 34 but was 26. Strings differ at index 4.
  Expected: "e1\n\trec1 w=2\n\tinclA x=1\n\tinclD x=2"
  But was:  "e1\n\tinclude "direct//recA""
  -----------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Dsl.Tests.XmlInclude.XmlIncludeMainTest.SimpleIncludeWithBxlAndDirectContent_Recursive () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Dsl.Tests.XmlInclude.XmlIncludeMainTest.SimpleIncludeWithBxlAndDirectContentNoDelay" executed="True" result="Failure" success="False" time="0.004" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 100 but was 134. Strings differ at index 2.
  Expected: "e1 z=1\n\tinclA x=1\n\tqxi::include "direct//inclD", delay\n\tqxi::..."
  But was:  "e1\n\tinclude "direct//inclA"\n\tinclude "direct//inclD", delay\n\t..."
  -------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Dsl.Tests.XmlInclude.XmlIncludeMainTest.SimpleIncludeWithBxlAndDirectContentNoDelay () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Dsl.Tests.XmlInclude.XmlIncludeMainTest.SimpleIncludeWithBxlAndDirectContentNoDelay_Recursive" executed="True" result="Failure" success="False" time="0.003" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 60 but was 26. Strings differ at index 4.
  Expected: "e1\n\trec1 w=2\n\tinclA x=1\n\tqxi::include "direct//inclD", delay"
  But was:  "e1\n\tinclude "direct//recA""
  -----------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Dsl.Tests.XmlInclude.XmlIncludeMainTest.SimpleIncludeWithBxlAndDirectContentNoDelay_Recursive () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Dsl.Tests.XmlInclude.XmlIncludeMainTest.Template_Test" executed="True" result="Failure" success="False" time="0.004" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 27 but was 43. Strings differ at index 0.
  Expected: "el1 X, z=2 : test\n\tel2\n\tel3"
  But was:  "template t1\n\tel1 z=2 : test\n\t\tel2\nt1 X\n\tel3"
  -----------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Dsl.Tests.XmlInclude.XmlIncludeMainTest.Template_Test () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Serialization" executed="True" result="Failure" success="False" time="5.388" asserts="0">
            <results>
              <test-suite type="TestFixture" name="Q66EmbededXmlSerialization" executed="True" result="Success" success="True" time="0.024" asserts="0">
                <results>
                  <test-case name="Qorpent.Serialization.Q66EmbededXmlSerialization.Q66Reproduce" executed="True" result="Success" success="True" time="0.022" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Tests" executed="True" result="Failure" success="False" time="5.362" asserts="0">
                <results>
                  <test-suite type="Namespace" name="BSharp" executed="True" result="Failure" success="False" time="4.031" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AdvancedIncludeTest" executed="True" result="Success" success="True" time="0.199" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.AdvancedIncludeTest.CanIncludeBodyWithBaseClass" executed="True" result="Success" success="True" time="0.137" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.AdvancedIncludeTest.CanIncludeBodyWithPrototype" executed="True" result="Success" success="True" time="0.017" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.AdvancedIncludeTest.CanIncludeWithBaseClass" executed="True" result="Success" success="True" time="0.020" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.AdvancedIncludeTest.CanIncludeWithPrototype" executed="True" result="Success" success="True" time="0.019" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AnonymousClassSupport" executed="True" result="Success" success="True" time="0.033" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.AnonymousClassSupport.CanDefineAnonimousClassesWithDistinctContent" executed="True" result="Success" success="True" time="0.016" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.AnonymousClassSupport.RemovesDoubledAnonymousClasses" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="BSharpBasics" executed="True" result="Success" success="True" time="0.608" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.AbstractsNotIncluded" executed="True" result="Success" success="True" time="0.012" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.BreakCycles" executed="True" result="Success" success="True" time="0.016" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.CanCompileSingleClass" executed="True" result="Success" success="True" time="0.014" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.CanCompileSingleClassInNamespace" executed="True" result="Success" success="True" time="0.015" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.CanCompileSingleClassInNamespaceAbstract" executed="True" result="Success" success="True" time="0.014" asserts="4" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.CanInterpolate" executed="True" result="Success" success="True" time="0.019" asserts="4" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.CanInterpolateAttributeNames" executed="True" result="Success" success="True" time="0.017" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.ConditionalImport" executed="True" result="Success" success="True" time="0.023" asserts="4" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.CycleInterpolation" executed="True" result="Success" success="True" time="0.015" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.DefaultImport" executed="True" result="Success" success="True" time="0.013" asserts="5" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.DefaultImportCrossNamespace" executed="True" result="Success" success="True" time="0.013" asserts="5" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.DefaultImportFromRootNamespace" executed="True" result="Success" success="True" time="0.014" asserts="5" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.DefaultImportInNamespace" executed="True" result="Success" success="True" time="0.014" asserts="5" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.ImportsProvided" executed="True" result="Success" success="True" time="0.014" asserts="5" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.ImportsProvidedHierarchically" executed="True" result="Success" success="True" time="0.015" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.MergableAsyncCall" executed="True" result="Success" success="True" time="0.045" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.MergeProvided" executed="True" result="Success" success="True" time="0.017" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.MergeProvidedHierarchically" executed="True" result="Success" success="True" time="0.015" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.MergesInner" executed="True" result="Success" success="True" time="0.014" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.MergesInnerNonStatic" executed="True" result="Success" success="True" time="0.015" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.MergesInnerNonStaticInHierarchy" executed="True" result="Success" success="True" time="0.014" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.MergesInnerNonStaticWithParametersOverride" executed="True" result="Success" success="True" time="0.016" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.MergesInnerStatic" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.MergesInnerStaticInHierarchy" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.MergesInnerStaticWithParametersOverride" executed="True" result="Success" success="True" time="0.016" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.NestedNamespaces" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.OrphanClassBasics" executed="True" result="Success" success="True" time="0.012" asserts="4" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.OrphanClassHierarchy" executed="True" result="Success" success="True" time="0.013" asserts="5" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.ResolveNamespaceUp" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.ResolveNamespaceUp2" executed="True" result="Success" success="True" time="0.014" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.SimplestInterpolate" executed="True" result="Success" success="True" time="0.015" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.SingleSourceMode" executed="True" result="Success" success="True" time="0.038" asserts="4" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.UnresolvedNamespaceMissed" executed="True" result="Success" success="True" time="0.014" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.UnresolvedNamespaceNoRoot" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[allow singleton anywhere resolution]]></message>
                            </reason>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpBasics.UnresolvedNamespaceNoRootNew" executed="True" result="Success" success="True" time="0.013" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="BSharpCodeBuilderTest" executed="True" result="Failure" success="False" time="0.015" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpCodeBuilderTest.BugToManyEmptyLines" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpCodeBuilderTest.CommentBlockTest" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpCodeBuilderTest.EqualReParse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpCodeBuilderTest.NamespaceClassElement" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpCodeBuilderTest.NamespaceClassElementWithEscapes" executed="True" result="Failure" success="False" time="0.001" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 174 but was 176. Strings differ at index 114.
  Expected: "...A____DBL__ a a=5 b=6 : """trtr\ndsds"""\n\tclass mya2 a=3 b=2..."
  But was:  "...A____DBL__ a a=5 b=6 : """trtr\r\ndsds"""\n\tclass mya2 a=3 b=..."
  ---------------------------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.BSharpCodeBuilderTest.NamespaceClassElementWithEscapes () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.BSharpCodeBuilderTest.NestedNamespaces" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ClassReference" executed="True" result="Success" success="True" time="0.181" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ClassReference.ArraySyntaxSupport" executed="True" result="Success" success="True" time="0.017" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ClassReference.CannotRefAbstractClasses" executed="True" result="Success" success="True" time="0.019" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ClassReference.CanResolveReferenceInInclude" executed="True" result="Success" success="True" time="0.044" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ClassReference.CrossNamespace2Test" executed="True" result="Success" success="True" time="0.019" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ClassReference.CrossNamespaceTest" executed="True" result="Success" success="True" time="0.017" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ClassReference.NamespaceTest" executed="True" result="Success" success="True" time="0.019" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ClassReference.NoAmbiguityOnCoAbstractReferences" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ClassReference.SimpleTest" executed="True" result="Success" success="True" time="0.019" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ConditionalInternals" executed="True" result="Success" success="True" time="0.216" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ConditionalInternals.AnyLevelConditional" executed="True" result="Success" success="True" time="0.012" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ConditionalInternals.CanSupplyConditionsWithCompiler" executed="True" result="Success" success="True" time="0.027" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ConditionalInternals.ClassCanBeConditional" executed="True" result="Success" success="True" time="0.027" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ConditionalInternals.NamespaceCanBeConditional" executed="True" result="Success" success="True" time="0.025" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ConditionalInternals.NonConditional" executed="True" result="Success" success="True" time="0.013" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ConditionalInternals.OverridenConditional" executed="True" result="Success" success="True" time="0.027" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ConditionalInternals.OverridesCanBeConditional" executed="True" result="Success" success="True" time="0.028" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ConditionalInternals.SimpleConditional" executed="True" result="Success" success="True" time="0.047" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ConstantsTest" executed="True" result="Success" success="True" time="0.167" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ConstantsTest.CanApplyToInternals" executed="True" result="Success" success="True" time="0.015" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ConstantsTest.CannotProvideЯнв" executed="True" result="Success" success="True" time="0.014" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ConstantsTest.CanUseConstants" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ConstantsTest.CanUseConstantsEarlyInterpolations" executed="True" result="Success" success="True" time="0.012" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ConstantsTest.CanUseConstantsInInterpolations" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ConstantsTest.ConstantAndElementNameCombination" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ConstantsTest.ConstantInterpolationInElements" executed="True" result="Success" success="True" time="0.014" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ConstantsTest.GlobalsAreCatched" executed="True" result="Success" success="True" time="0.014" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ConstantsTest.GlobalsWithConstInterpolationsAreInterpolated" executed="True" result="Success" success="True" time="0.014" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ConstantsTest.GlobalsWithInterpolationsAreCatched" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ConstantsTest.InterpolationInElementsNoConstants_ControlTest" executed="True" result="Success" success="True" time="0.012" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="DictionarySupport" executed="True" result="Success" success="True" time="0.143" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.DictionarySupport.CanAvoidNotResolvedRef" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.DictionarySupport.CanAvoidNotResolvedValue" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.DictionarySupport.CanSupplyNotResolvedRef" executed="True" result="Success" success="True" time="0.019" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.DictionarySupport.CanSupplyNotResolvedValue" executed="True" result="Success" success="True" time="0.019" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.DictionarySupport.CanSupplyValue" executed="True" result="Success" success="True" time="0.019" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.DictionarySupport.CanSupplyValueAndRef" executed="True" result="Success" success="True" time="0.022" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.DictionarySupport.ExportKeywordRemoved" executed="True" result="Success" success="True" time="0.014" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ErrorHandling" executed="True" result="Success" success="True" time="0.302" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ErrorHandling.AmbigousClassReference" executed="True" result="Success" success="True" time="0.020" asserts="4" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ErrorHandling.BugBadErrorCatchOnClassReference" executed="True" result="Success" success="True" time="0.018" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ErrorHandling.ClassCreatedFormExtension" executed="True" result="Success" success="True" time="0.013" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ErrorHandling.ClassCreatedFormOverride" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ErrorHandling.DuplicateClassNames" executed="True" result="Success" success="True" time="0.014" asserts="4" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ErrorHandling.EmptyInclude" executed="True" result="Success" success="True" time="0.014" asserts="4" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ErrorHandling.FakeInclude" executed="True" result="Success" success="True" time="0.014" asserts="4" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ErrorHandling.IgnoredImport" executed="True" result="Success" success="True" time="0.014" asserts="4" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ErrorHandling.NotDirectClassReference" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[now singleton resolution existed]]></message>
                            </reason>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ErrorHandling.NotResolvedClassReference" executed="True" result="Success" success="True" time="0.023" asserts="4" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ErrorHandling.NotResolvedDictionary" executed="True" result="Success" success="True" time="0.019" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ErrorHandling.NotResolvedDictionaryElement" executed="True" result="Success" success="True" time="0.020" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ErrorHandling.NotResolvedImport" executed="True" result="Success" success="True" time="0.015" asserts="4" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ErrorHandling.NotResolvedInclude" executed="True" result="Success" success="True" time="0.014" asserts="4" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ErrorHandling.OrphanClass" executed="True" result="Success" success="True" time="0.012" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ErrorHandling.OrphanImport" executed="True" result="Success" success="True" time="0.015" asserts="4" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ErrorHandling.OrphanInclude" executed="True" result="Success" success="True" time="0.015" asserts="4" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.ErrorHandling.RecycleImport" executed="True" result="Success" success="True" time="0.020" asserts="11" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="EvaluationsSupport" executed="True" result="Failure" success="False" time="0.113" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.EvaluationsSupport.DeepInternalsSupport" executed="True" result="Success" success="True" time="0.030" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.EvaluationsSupport.DeepInternalsSupportWithInclude" executed="True" result="Error" success="False" time="0.014" asserts="0">
                            <failure>
                              <message><![CDATA[System.NullReferenceException : Object reference not set to an instance of an object]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.EvaluationsSupport.DeepInternalsSupportWithInclude () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.EvaluationsSupport.DeepInternalsSupportWithIncludeAtIncludeSide" executed="True" result="Error" success="False" time="0.016" asserts="0">
                            <failure>
                              <message><![CDATA[System.InvalidOperationException : Sequence contains no elements]]></message>
                              <stack-trace><![CDATA[at System.Linq.Enumerable.First[XElement] (IEnumerable`1 source) [0x00000] in <filename unknown>:0
at Qorpent.Serialization.Tests.BSharp.EvaluationsSupport.DeepInternalsSupportWithIncludeAtIncludeSide () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.EvaluationsSupport.ElementDefinitionSupport" executed="True" result="Success" success="True" time="0.015" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.EvaluationsSupport.SimpleEvalNumberDefinition" executed="True" result="Success" success="True" time="0.014" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.EvaluationsSupport.SimpleEvalNumberDefinitionBindToExisted" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="GeneratorTest" executed="True" result="Success" success="True" time="0.054" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.GeneratorTest.CanGenerateWithOneDataSetSimple" executed="True" result="Success" success="True" time="0.022" asserts="6" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.GeneratorTest.CanSupplyImportClause" executed="True" result="Success" success="True" time="0.015" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.GeneratorTest.NotFailOnParse" executed="True" result="Success" success="True" time="0.013" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="GenericSupport" executed="True" result="Failure" success="False" time="0.113" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.GenericSupport.BaseGenericSupport" executed="True" result="Success" success="True" time="0.014" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.GenericSupport.CanSetGenericInElements" executed="True" result="Failure" success="False" time="0.017" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected: 193
  But was:  197
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.GenericSupport.CanSetGenericInElements () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.GenericSupport.CanSetGenericInElementsWithGenericConditions" executed="True" result="Failure" success="False" time="0.021" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected: 127
  But was:  129
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.GenericSupport.CanSetGenericInElementsWithGenericConditions () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.GenericSupport.GenericAttributeNames" executed="True" result="Success" success="True" time="0.017" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.GenericSupport.GenericSupportWithInternals" executed="True" result="Failure" success="False" time="0.018" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected: 159
  But was:  163
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.GenericSupport.GenericSupportWithInternals () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.GenericSupport.RealWorldGenericCase" executed="True" result="Success" success="True" time="0.015" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="GlobalSupport" executed="True" result="Success" success="True" time="0.015" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.GlobalSupport.CanInterpolateWithGlobals" executed="True" result="Success" success="True" time="0.014" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="IncludeTest" executed="True" result="Failure" success="False" time="0.479" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.AllIncludeClauses" executed="True" result="Failure" success="False" time="0.016" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 255 but was 265. Strings differ at index 35.
  Expected: "...s code="B" x="2" fullcode="B">\n  <mygroup name="1">\n    <t..."
  But was:  "...s code="B" x="2" fullcode="B">\r\n  <mygroup name="1">\r\n    ..."
  ---------------------------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.IncludeTest.AllIncludeClauses () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.CanEmbed" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.CanEmbedWithParameter" executed="True" result="Success" success="True" time="0.017" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.CanFindByElementLocalName" executed="True" result="Failure" success="False" time="0.018" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 159 but was 163. Strings differ at index 35.
  Expected: "...s code="B" x="2" fullcode="B">\n  <x code="a" x="1" y="5" i..."
  But was:  "...s code="B" x="2" fullcode="B">\r\n  <x code="a" x="1" y="5" ..."
  ---------------------------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.IncludeTest.CanFindByElementLocalName () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.CanInclude" executed="True" result="Success" success="True" time="0.014" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.CanIncludeBodyOnly" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.CanIncludeNoChild" executed="True" result="Success" success="True" time="0.014" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.CanIncludeNoChildAndBody" executed="True" result="Success" success="True" time="0.017" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.CanIncludeRecursivelly" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.CanIncludeSelectedAttributesAll" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[]]></message>
                            </reason>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.CanIncludeSelectedAttributesBodyAll" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[]]></message>
                            </reason>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.CanIncludeSelectedAttributesBodyRootOnly" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[]]></message>
                            </reason>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.CanIncludeSelectedAttributesRootOnly" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[]]></message>
                            </reason>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.CanIncludeWithElementRename" executed="True" result="Success" success="True" time="0.014" asserts="1" />
                          <test-suite type="ParameterizedTest" name="CanIncludeWithNonLiteralAttrName" executed="True" result="Success" success="True" time="0.061" asserts="0">
                            <results>
                              <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.CanIncludeWithNonLiteralAttrName(&quot;~&quot;,&quot;y&quot;,&quot;1&quot;,&quot;1&quot;)" executed="True" result="Success" success="True" time="0.014" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.CanIncludeWithNonLiteralAttrName(&quot;+&quot;,&quot;y&quot;,&quot;1&quot;,&quot;1&quot;)" executed="True" result="Success" success="True" time="0.015" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.CanIncludeWithNonLiteralAttrName(&quot;~&quot;,&quot;x&quot;,&quot;10&quot;,&quot;10&quot;)" executed="True" result="Success" success="True" time="0.015" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.CanIncludeWithNonLiteralAttrName(&quot;+&quot;,&quot;x&quot;,&quot;10&quot;,&quot;1&quot;)" executed="True" result="Success" success="True" time="0.015" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.CanResolveNoNameSpace" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.CanUseWhere" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.CrossClassGroupBy" executed="True" result="Failure" success="False" time="0.020" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 247 but was 257. Strings differ at index 35.
  Expected: "...s code="B" x="2" fullcode="B">\n  <group code="1">\n    <tes..."
  But was:  "...s code="B" x="2" fullcode="B">\r\n  <group code="1">\r\n    <t..."
  ---------------------------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.IncludeTest.CrossClassGroupBy () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.EmbedIntoElementTest" executed="True" result="Failure" success="False" time="0.014" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 74 but was 78. Strings differ at index 29.
  Expected: "...ullcode='x'>\n  <c a='xxx'>\n    <p>xxx</p>\n  </c>\n</class>"
  But was:  "...ullcode='x'>\r\n  <c a='xxx'>\r\n    <p>xxx</p>\r\n  </c>\r\n</class>"
  ---------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.IncludeTest.EmbedIntoElementTest () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.GroupByClauseForBody" executed="True" result="Failure" success="False" time="0.014" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 318 but was 328. Strings differ at index 35.
  Expected: "...s code="B" x="2" fullcode="B">\n  <group code="1">\n    <tes..."
  But was:  "...s code="B" x="2" fullcode="B">\r\n  <group code="1">\r\n    <t..."
  ---------------------------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.IncludeTest.GroupByClauseForBody () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.IncludeAllWithElementName" executed="True" result="Failure" success="False" time="0.025" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected: 90
  But was:  92
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.IncludeTest.IncludeAllWithElementName () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.IncludeAllWithWhere" executed="True" result="Success" success="True" time="0.020" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.IncludeAllWithWhereAndCrossList" executed="True" result="Failure" success="False" time="0.022" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 100 but was 103. Strings differ at index 29.
  Expected: "<class code='a' fullcode='a'>\n  <Y g='a' prototype='t' />\n  <..."
  But was:  "<class code='a' fullcode='a'>\r\n  <X g='default' prototype='t'..."
  -----------------------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.IncludeTest.IncludeAllWithWhereAndCrossList () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.LateInterpolationInIncludeAll" executed="True" result="Success" success="True" time="0.019" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.MultiConditionInIncludeAll" executed="True" result="Success" success="True" time="0.020" asserts="4" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.NoBugOnEmptyStringAttribute" executed="True" result="Failure" success="False" time="0.014" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 63 but was 67. Strings differ at index 29.
  Expected: "... code='x' fullcode='x'>\n  <c>\n    <p></p>\n  </c>\n</class>"
  But was:  "... code='x' fullcode='x'>\r\n  <c>\r\n    <p></p>\r\n  </c>\r\n</class>"
  --------------------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.IncludeTest.NoBugOnEmptyStringAttribute () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.NormalInclideAwaredInterpolation" executed="True" result="Failure" success="False" time="0.016" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 234 but was 239. Strings differ at index 43.
  Expected: "...polyline' fullcode='polyline'>\n  <point X='2px' Y='3px' co..."
  But was:  "...polyline' fullcode='polyline'>\r\n  <point X='2px' Y='3px' c..."
  ---------------------------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.IncludeTest.NormalInclideAwaredInterpolation () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.IncludeTest.SelectClauseForBody" executed="True" result="Success" success="True" time="0.014" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="Matcher" executed="True" result="Success" success="True" time="0.040" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="SingleConditionTests" executed="True" result="Success" success="True" time="0.040" asserts="0">
                            <results>
                              <test-suite type="ParameterizedTest" name="Contains" executed="True" result="Success" success="True" time="0.003" asserts="0">
                                <results>
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.Contains(&quot;x a%=a&quot;,&quot;x&quot;,False)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.Contains(&quot;x a%=a&quot;,&quot;x a=xzx&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.Contains(&quot;x a%=z&quot;,&quot;x a=xzx&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite type="ParameterizedTest" name="EqAnNeq" executed="True" result="Success" success="True" time="0.004" asserts="0">
                                <results>
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.EqAnNeq(&quot;x a=1&quot;,&quot;x&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.EqAnNeq(&quot;x a!=2&quot;,&quot;x&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.EqAnNeq(&quot;x a!=1&quot;,&quot;x&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.EqAnNeq(&quot;x a=1&quot;,&quot;x a=1&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.EqAnNeq(&quot;x a!=2&quot;,&quot;x a=1&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.EqAnNeq(&quot;x a!=1&quot;,&quot;x a=1&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite type="ParameterizedTest" name="InList" executed="True" result="Success" success="True" time="0.008" asserts="0">
                                <results>
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.InList(&quot;x a&amp;=val&quot;,&quot;x&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.InList(&quot;x a&amp;=val&quot;,&quot;x a=\'x val2 c\'&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.InList(&quot;x a&amp;=val&quot;,&quot;x a=\'x; val; c\'&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.InList(&quot;x a&amp;=val&quot;,&quot;x a=\'x, val, c\'&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.InList(&quot;x a&amp;=val&quot;,&quot;x a=\'x val c\'&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite type="ParameterizedTest" name="IsLeGe" executed="True" result="Success" success="True" time="0.009" asserts="0">
                                <results>
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.IsLeGe(&quot;x a&lt;&lt;=2&quot;,&quot;x a=2&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.IsLeGe(&quot;x a&lt;&lt;=2&quot;,&quot;x a=1&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.IsLeGe(&quot;x a&lt;=2&quot;,&quot;x a=1&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.IsLeGe(&quot;x a&lt;=2&quot;,&quot;x a=2&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.IsLeGe(&quot;x a&lt;=2&quot;,&quot;x a=3&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.IsLeGe(&quot;x a&lt;=2&quot;,&quot;x&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.IsLeGe(&quot;x a&gt;&gt;=2&quot;,&quot;x a=2&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.IsLeGe(&quot;x a&gt;&gt;=2&quot;,&quot;x a=3&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.IsLeGe(&quot;x a&gt;=2&quot;,&quot;x a=2&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.IsLeGe(&quot;x a&gt;=2&quot;,&quot;x a=3&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.IsLeGe(&quot;x a&gt;=2&quot;,&quot;x&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite type="ParameterizedTest" name="IsNull" executed="True" result="Success" success="True" time="0.002" asserts="0">
                                <results>
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.IsNull(&quot;x a!=NULL&quot;,&quot;x&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.IsNull(&quot;x a!=NULL&quot;,&quot;x a=1&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.IsNull(&quot;x a=NULL&quot;,&quot;x a=1&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.IsNull(&quot;x a=NULL&quot;,&quot;x&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite type="ParameterizedTest" name="IsTrue" executed="True" result="Success" success="True" time="0.004" asserts="0">
                                <results>
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.IsTrue(&quot;x a!=TRUE&quot;,&quot;x a=0&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.IsTrue(&quot;x a=TRUE&quot;,&quot;x a=0&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.IsTrue(&quot;x a=TRUE&quot;,&quot;x a=true&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.IsTrue(&quot;x a=TRUE&quot;,&quot;x a=1&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.IsTrue(&quot;x a!=TRUE&quot;,&quot;x&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.IsTrue(&quot;x a=TRUE&quot;,&quot;x&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite type="ParameterizedTest" name="Regex" executed="True" result="Success" success="True" time="0.003" asserts="0">
                                <results>
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.Regex(&quot;x a~=\'z\\\\d\'&quot;,&quot;x&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.Regex(&quot;x a~=\'z\\\\d\'&quot;,&quot;x a=xzAx&quot;,False)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                                  <test-case name="Qorpent.Serialization.Tests.BSharp.Matcher.SingleConditionTests.Regex(&quot;x a~=\'z\\\\d\'&quot;,&quot;x a=xz2x&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="MergeContentTests" executed="True" result="Success" success="True" time="0.237" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.MergeContentTests.CanExtendElementBody" executed="True" result="Success" success="True" time="0.047" asserts="8" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.MergeContentTests.CanExtendNotCodedElements" executed="True" result="Success" success="True" time="0.015" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.MergeContentTests.CanExtendNotCodedElementsInExtension" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.MergeContentTests.CanMergeWithLocalAttributes" executed="True" result="Success" success="True" time="0.012" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.MergeContentTests.CanOverrideElement" executed="True" result="Success" success="True" time="0.032" asserts="4" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.MergeContentTests.CanOverrideElementBody" executed="True" result="Success" success="True" time="0.047" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.MergeContentTests.CanRedefineElement" executed="True" result="Success" success="True" time="0.028" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.MergeContentTests.CanUseDefaultMergeNames" executed="True" result="Success" success="True" time="0.017" asserts="6" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.MergeContentTests.NestedElementsSupport" executed="True" result="Success" success="True" time="0.015" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PartialClassSupport" executed="True" result="Failure" success="False" time="0.246" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PartialClassSupport.CanDefineClassFromExtension" executed="True" result="Success" success="True" time="0.015" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PartialClassSupport.CanDefineClassFromOverride" executed="True" result="Success" success="True" time="0.014" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PartialClassSupport.CanExtendAndOverrideValidOrder" executed="True" result="Success" success="True" time="0.015" asserts="6" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PartialClassSupport.CanExtendAttribute" executed="True" result="Success" success="True" time="0.012" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PartialClassSupport.CanExtendElement" executed="True" result="Success" success="True" time="0.014" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PartialClassSupport.CanExtendValidOrder" executed="True" result="Success" success="True" time="0.014" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PartialClassSupport.CanInterpolateWithExtensions" executed="True" result="Success" success="True" time="0.014" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PartialClassSupport.CanMakeClassAbstract" executed="True" result="Success" success="True" time="0.029" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PartialClassSupport.CanOverrideAttribute" executed="True" result="Success" success="True" time="0.012" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PartialClassSupport.CanOverrideElement" executed="True" result="Success" success="True" time="0.014" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PartialClassSupport.CanOverrideValidOrder" executed="True" result="Success" success="True" time="0.014" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PartialClassSupport.ExtendWithElementValues" executed="True" result="Failure" success="False" time="0.015" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 104 but was 109. Strings differ at index 25.
  Expected: "<A code='B' fullcode='B'>\n  <el code='1'>\n    <row code='1' /..."
  But was:  "<A code='B' fullcode='B'>\r\n  <el code='1'>\r\n    <row code='1'..."
  -------------------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.PartialClassSupport.ExtendWithElementValues () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PartialClassSupport.OverrideWithElementValues" executed="True" result="Failure" success="False" time="0.015" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 83 but was 87. Strings differ at index 25.
  Expected: "<A code='B' fullcode='B'>\n  <el code='1'>\n    <row code='2'>t..."
  But was:  "<A code='B' fullcode='B'>\r\n  <el code='1'>\r\n    <row code='2'..."
  -------------------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.PartialClassSupport.OverrideWithElementValues () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PartialClassSupport.Q186InvalidClassNameAndNamespaceResolution" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PartialClassSupport.RemoveBeforeSupport" executed="True" result="Failure" success="False" time="0.016" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 194 but was 201. Strings differ at index 36.
  Expected: "...code='other' fullcode='other'>\n  <out code='X'>\n    <row c..."
  But was:  "...code='other' fullcode='other'>\r\n  <out code='X'>\r\n    <row..."
  ---------------------------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.PartialClassSupport.RemoveBeforeSupport () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PatchClassSupport" executed="True" result="Failure" success="False" time="0.463" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PatchClassSupport.CanCreateNotExistedInCreateMode" executed="True" result="Failure" success="False" time="0.084" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 115 but was 118. Strings differ at index 29.
  Expected: "<class code='A' fullcode='A'>\n  <x code='a' name='name1' shor..."
  But was:  "<class code='A' fullcode='A'>\r\n  <x code='a' name='name1' sho..."
  -----------------------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.PatchClassSupport.CanCreateNotExistedInCreateMode () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PatchClassSupport.CanIgnoreNotExistedInNoneMode" executed="True" result="Failure" success="False" time="0.024" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 90 but was 92. Strings differ at index 29.
  Expected: "<class code='A' fullcode='A'>\n  <x code='a' name='name1' shor..."
  But was:  "<class code='A' fullcode='A'>\r\n  <x code='a' name='name1' sho..."
  -----------------------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.PatchClassSupport.CanIgnoreNotExistedInNoneMode () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PatchClassSupport.ErrorOnNonExistedByDefault" executed="True" result="Failure" success="False" time="0.027" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 82 but was 84. Strings differ at index 29.
  Expected: "...e='A'>\n  <x code='a' name='name1' shortname='n' />\n</class>"
  But was:  "...e='A'>\r\n  <x code='a' name='name1' shortname='n' />\r\n</class>"
  ---------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.PatchClassSupport.ErrorOnNonExistedByDefault () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PatchClassSupport.HierarchicalMove" executed="True" result="Failure" success="False" time="0.027" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 123 but was 128. Strings differ at index 29.
  Expected: "<class code='A' fullcode='A'>\n  <x code='a' name='name1' shor..."
  But was:  "<class code='A' fullcode='A'>\r\n  <x code='a' name='name1' sho..."
  -----------------------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.PatchClassSupport.HierarchicalMove () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PatchClassSupport.HierarchicalPatch" executed="True" result="Failure" success="False" time="0.025" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 127 but was 131. Strings differ at index 29.
  Expected: "<class code='A' fullcode='A'>\n  <x code='a' name='name2' shor..."
  But was:  "<class code='A' fullcode='A'>\r\n  <x code='a' name='name2' sho..."
  -----------------------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.PatchClassSupport.HierarchicalPatch () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PatchClassSupport.InternalElementsCreation" executed="True" result="Failure" success="False" time="0.021" asserts="2">
                            <failure>
                              <message><![CDATA[  Expected: 485
  But was:  494
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.PatchClassSupport.InternalElementsCreation () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-suite type="ParameterizedTest" name="InvalidBehaviorCauseError" executed="True" result="Success" success="True" time="0.095" asserts="0">
                            <results>
                              <test-case name="Qorpent.Serialization.Tests.BSharp.PatchClassSupport.InvalidBehaviorCauseError(&quot;zzzz&quot;,Invalid)" executed="True" result="Success" success="True" time="0.033" asserts="4" />
                              <test-case name="Qorpent.Serialization.Tests.BSharp.PatchClassSupport.InvalidBehaviorCauseError(&quot;&quot;,Default)" executed="True" result="Success" success="True" time="0.012" asserts="2" />
                              <test-case name="Qorpent.Serialization.Tests.BSharp.PatchClassSupport.InvalidBehaviorCauseError(&quot;none&quot;,NoneOnNew)" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                              <test-case name="Qorpent.Serialization.Tests.BSharp.PatchClassSupport.InvalidBehaviorCauseError(&quot;error&quot;,Default)" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                              <test-case name="Qorpent.Serialization.Tests.BSharp.PatchClassSupport.InvalidBehaviorCauseError(&quot;create&quot;,CreateOnNew)" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                            </results>
                          </test-suite>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PatchClassSupport.MultiplePatchWithPriority" executed="True" result="Failure" success="False" time="0.031" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 90 but was 92. Strings differ at index 29.
  Expected: "<class code='A' fullcode='A'>\n  <x code='a' name='name2' shor..."
  But was:  "<class code='A' fullcode='A'>\r\n  <x code='a' name='name2' sho..."
  -----------------------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.PatchClassSupport.MultiplePatchWithPriority () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PatchClassSupport.PatchCompiledButNotIncludedIntoLibPkg" executed="True" result="Success" success="True" time="0.013" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PatchClassSupport.PatchWithInternals" executed="True" result="Failure" success="False" time="0.027" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 94 but was 98. Strings differ at index 29.
  Expected: "<class code='A' fullcode='A'>\n  <x code='a' name='name2'>\n   ..."
  But was:  "<class code='A' fullcode='A'>\r\n  <x code='a' name='name2'>\r\n ..."
  -----------------------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.PatchClassSupport.PatchWithInternals () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PatchClassSupport.PatchWithoutTargetCauseError" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PatchClassSupport.PlainToTreePatch" executed="True" result="Failure" success="False" time="0.027" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 105 but was 109. Strings differ at index 29.
  Expected: "<class code='A' fullcode='A'>\n  <x code='a' name='name1'>\n   ..."
  But was:  "<class code='A' fullcode='A'>\r\n  <x code='a' name='name1'>\r\n ..."
  -----------------------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.PatchClassSupport.PlainToTreePatch () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.PatchClassSupport.SimplePatch" executed="True" result="Failure" success="False" time="0.025" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 90 but was 92. Strings differ at index 29.
  Expected: "<class code='A' fullcode='A'>\n  <x code='a' name='name2' shor..."
  But was:  "<class code='A' fullcode='A'>\r\n  <x code='a' name='name2' sho..."
  -----------------------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.BSharp.PatchClassSupport.SimplePatch () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="Preprocessor" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="StringReplacerTest" executed="True" result="Success" success="True" time="0.004" asserts="0">
                            <results>
                              <test-case name="Qorpent.Serialization.Tests.BSharp.Preprocessor.StringReplacerTest.StrangeBugWithRegex" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="RequireSupportForPreBuildPackages" executed="True" result="Success" success="True" time="0.022" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.RequireSupportForPreBuildPackages.CanUseDataPackage" executed="True" result="Success" success="True" time="0.020" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="Runtime" executed="True" result="Success" success="True" time="0.204" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="BSharpLibraryClassProviderTest" executed="True" result="Success" success="True" time="0.204" asserts="0">
                            <results>
                              <test-case name="Qorpent.Serialization.Tests.BSharp.Runtime.BSharpLibraryClassProviderTest.CanLoadIndex" executed="True" result="Success" success="True" time="0.202" asserts="2" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="Schema" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="AttributeRuleTest" executed="True" result="Success" success="True" time="0.009" asserts="0">
                            <results>
                              <test-case name="Qorpent.Serialization.Tests.BSharp.Schema.AttributeRuleTest.CanCreateRequiredAttibute" executed="True" result="Success" success="True" time="0.002" asserts="5" />
                              <test-case name="Qorpent.Serialization.Tests.BSharp.Schema.AttributeRuleTest.CanRemoveAttributeWithAction" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                              <test-case name="Qorpent.Serialization.Tests.BSharp.Schema.AttributeRuleTest.CanRemoveAttributeWithDenyType" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                              <test-case name="Qorpent.Serialization.Tests.BSharp.Schema.AttributeRuleTest.CanSkipRequiredAttibute" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                              <test-case name="Qorpent.Serialization.Tests.BSharp.Schema.AttributeRuleTest.WarnObsoleteAttibute" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ElementRuleTest" executed="True" result="Success" success="True" time="0.005" asserts="0">
                            <results>
                              <test-case name="Qorpent.Serialization.Tests.BSharp.Schema.ElementRuleTest.AutoStrictModeAttributeFilter" executed="True" result="Success" success="True" time="0.002" asserts="4" />
                              <test-case name="Qorpent.Serialization.Tests.BSharp.Schema.ElementRuleTest.NonStrictMode" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SetKeyword" executed="True" result="Success" success="True" time="0.056" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.SetKeyword.ImportAndInterpolationTest" executed="True" result="Success" success="True" time="0.012" asserts="5" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.SetKeyword.IncludeAndInterpolationTest" executed="True" result="Success" success="True" time="0.013" asserts="5" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.SetKeyword.NestedSet" executed="True" result="Success" success="True" time="0.013" asserts="5" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.SetKeyword.SimpleTest" executed="True" result="Success" success="True" time="0.013" asserts="5" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TbxlSamples" executed="True" result="Success" success="True" time="0.062" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.BSharp.TbxlSamples.ColsetWithImportAndCodeSubstSample" executed="True" result="Success" success="True" time="0.033" asserts="0" />
                          <test-case name="Qorpent.Serialization.Tests.BSharp.TbxlSamples.SampleToSetupPlanFactForms" executed="True" result="Success" success="True" time="0.026" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Bxl" executed="True" result="Failure" success="False" time="0.288" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Ap286ParserTests" executed="True" result="Success" success="True" time="0.034" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.Ap286ParserTests.can_parse_AP286_1_localized" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-suite type="ParameterizedTest" name="QPT96_Bug" executed="True" result="Success" success="True" time="0.032" asserts="0">
                            <results>
                              <test-case name="Qorpent.Serialization.Tests.Bxl.Ap286ParserTests.QPT96_Bug(&quot;a c=\'\', d=\'\'&quot;,&quot;c,d&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.Ap286ParserTests.QPT96_Bug(&quot;a c=\'\',d=\'\'&quot;,&quot;c,d&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.Ap286ParserTests.QPT96_Bug(&quot;a c=\'\'   d=\'\'&quot;,&quot;c,d&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.Ap286ParserTests.QPT96_Bug(&quot;a c=\'\' d=\'\'&quot;,&quot;c,d&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.Ap286ParserTests.QPT96_Bug(&quot;a c=\'\', &quot;,&quot;c&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.Ap286ParserTests.QPT96_Bug(&quot;a c=\'\' &quot;,&quot;c&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.Ap286ParserTests.QPT96_Bug(&quot;a c=\'\',&quot;,&quot;c&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.Ap286ParserTests.QPT96_Bug(&quot;a c=\'\'&quot;,&quot;c&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.Ap286ParserTests.QPT96_Bug(&quot;a c=\&quot;\&quot;, d=\&quot;\&quot;&quot;,&quot;c,d&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.Ap286ParserTests.QPT96_Bug(&quot;a c=\&quot;\&quot;,d=\&quot;\&quot;&quot;,&quot;c,d&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.Ap286ParserTests.QPT96_Bug(&quot;a c=\&quot;\&quot;   d=\&quot;\&quot;&quot;,&quot;c,d&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.Ap286ParserTests.QPT96_Bug(&quot;a c=\&quot;\&quot; d=\&quot;\&quot;&quot;,&quot;c,d&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.Ap286ParserTests.QPT96_Bug(&quot;a c=\&quot;\&quot;, &quot;,&quot;c&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.Ap286ParserTests.QPT96_Bug(&quot;a c=\&quot;\&quot; &quot;,&quot;c&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.Ap286ParserTests.QPT96_Bug(&quot;a c=\&quot;\&quot;,&quot;,&quot;c&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.Ap286ParserTests.QPT96_Bug(&quot;a c=\&quot;\&quot;&quot;,&quot;c&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="BxlParserCompatibilityTests" executed="True" result="Failure" success="False" time="0.075" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserCompatibilityTests.CanInterpolateDuringParse" executed="True" result="Failure" success="False" time="0.001" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 201 but was 207. Strings differ at index 23.
  Expected: "<root _file="code.bxl">\n  <test _file="code.bxl" _line="2" x=..."
  But was:  "<root _file="code.bxl">\r\n  <test _file="code.bxl" _line="2" x..."
  -----------------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Bxl.BxlParserCompatibilityTests.CanInterpolateDuringParse () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserCompatibilityTests.CanParseAttribuesAfterElements" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserCompatibilityTests.CanUseBSharpDuringParse" executed="True" result="Failure" success="False" time="0.016" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 67 but was 69. Strings differ at index 8.
  Expected: "...\n  <class code="B" y="${x}" fullcode="B" x="1" />\n</bsharp>"
  But was:  "...\r\n  <class code="B" y="${x}" fullcode="B" x="1" />\r\n</bsharp>"
  ---------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Bxl.BxlParserCompatibilityTests.CanUseBSharpDuringParse () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserCompatibilityTests.CanUseBSharpWithInterpolationsDuringParse" executed="True" result="Failure" success="False" time="0.014" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 64 but was 66. Strings differ at index 8.
  Expected: "...rp>\n  <class code="B" y="1" fullcode="B" x="1" />\n</bsharp>"
  But was:  "...rp>\r\n  <class code="B" y="1" fullcode="B" x="1" />\r\n</bsharp>"
  ------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Bxl.BxlParserCompatibilityTests.CanUseBSharpWithInterpolationsDuringParse () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserCompatibilityTests.GeneratesNamespaceDeclarations" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserCompatibilityTests.GeneratesNamespaceDeclarations_ImplicitWellknownNameSpace" executed="True" result="Failure" success="False" time="0.001" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 480 but was 425. Strings differ at index 6.
  Expected: "<root xmlns:qxi="http://qorpent/xml/include" _file="code.bxl"..."
  But was:  "<root _file="code.bxl">\n  <e1 _file="code.bxl" _line="2">\n   ..."
  -----------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Bxl.BxlParserCompatibilityTests.GeneratesNamespaceDeclarations_ImplicitWellknownNameSpace () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserCompatibilityTests.GeneratesNamespaceDeclarations_NotWorkingExample" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserCompatibilityTests.Implicit_Namespace_Generation" executed="True" result="Failure" success="False" time="0.001" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 97 but was 32. Strings differ at index 5.
  Expected: "<root xmlns:a="namespace::myfile_X" xmlns:b="namespace::myfil..."
  But was:  "<root>\n  <e1 />\n  <e1 />\n</root>"
  ----------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Bxl.BxlParserCompatibilityTests.Implicit_Namespace_Generation () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserCompatibilityTests.NotAllowAttributesAtRoot" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[now it's allowed]]></message>
                            </reason>
                          </test-case>
                          <test-suite type="ParameterizedTest" name="QPT78_Not_Supported_DoubleDot_In_Attribute" executed="True" result="Success" success="True" time="0.005" asserts="0">
                            <results>
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserCompatibilityTests.QPT78_Not_Supported_DoubleDot_In_Attribute(&quot;e x=\&quot;a:a\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserCompatibilityTests.QPT78_Not_Supported_DoubleDot_In_Attribute(&quot;e\r\n\tx=\'a:a\'&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserCompatibilityTests.QPT78_Not_Supported_DoubleDot_In_Attribute(&quot;e x=\'a:a\'&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserCompatibilityTests.QPT78_Not_Supported_DoubleDot_In_Attribute(&quot;e\r\n\tx=\&quot;\&quot;\&quot;a:a\&quot;\&quot;\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserCompatibilityTests.QPT78_Not_Supported_DoubleDot_In_Attribute(&quot;e x=\&quot;\&quot;\&quot;a:a\&quot;\&quot;\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserCompatibilityTests.SupportBracesInLiteral" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserCompatibilityTests.UsesNamespacesInAttributeNames" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserCompatibilityTests.UsesNamespacesInElementNames" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserCompatibilityTests.WrongAssignError" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="BxlParserTests" executed="True" result="Failure" success="False" time="0.169" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.AllowDoubledAttributesByDefault" executed="True" result="Failure" success="False" time="0.002" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 72 but was 74. Strings differ at index 23.
  Expected: "...code.bxl'>\n  <a _file='code.bxl' _line='2' x='2' />\n</root>"
  But was:  "...code.bxl'>\r\n  <a _file='code.bxl' _line='2' x='2' />\r\n</root>"
  -------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Bxl.BxlParserTests.AllowDoubledAttributesByDefault () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-suite type="ParameterizedTest" name="AllowFunctionCallLikeNames" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.AllowFunctionCallLikeNames(&quot;a fn(c)=x&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="AllowFunctionCallLikeValues" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.AllowFunctionCallLikeValues(&quot;a x=fn(c)&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.AllowFunctionCallLikeValues(&quot;a fn(c)&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.AllowRootAttributesByDefault" executed="True" result="Failure" success="False" time="0.001" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 72 but was 74. Strings differ at index 29.
  Expected: "...file='code.bxl'>\n  <a _file='code.bxl' _line='2' />\n</root>"
  But was:  "...file='code.bxl'>\r\n  <a _file='code.bxl' _line='2' />\r\n</root>"
  -------------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Bxl.BxlParserTests.AllowRootAttributesByDefault () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.AnonCodeNotOverrideDirectlySetId" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.AnonymousSupport" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.BugInExpressionParseIfCommentFollow" executed="True" result="Failure" success="False" time="0.001" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 84 but was 86. Strings differ at index 23.
  Expected: "<root _file='code.bxl'>\n  <a _file='code.bxl' _line='1' code=..."
  But was:  "<root _file='code.bxl'>\r\n  <a _file='code.bxl' _line='1' code..."
  -----------------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Bxl.BxlParserTests.BugInExpressionParseIfCommentFollow () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanCountAnonAttributes" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanDeclareDefaultNamespace" executed="True" result="Failure" success="False" time="0.001" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 0 but was 21. Strings differ at index 0.
  Expected: <string.Empty>
  But was:  "namespace::code.bxl_X"
  -----------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanDeclareDefaultNamespace () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanDeclareNamespace" executed="True" result="Failure" success="False" time="0.001" asserts="2">
                            <failure>
                              <message><![CDATA[  Expected string length 0 but was 5. Strings differ at index 0.
  Expected: <string.Empty>
  But was:  "ololo"
  -----------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanDeclareNamespace () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanGetAnonymousAttribute" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanGetAttributeValue" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanGetNestedAttribute" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="CanGetSingleNewLineSymbol" executed="True" result="Success" success="True" time="0.006" asserts="0">
                            <results>
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanGetSingleNewLineSymbol(&quot;e x=\'\\\\\'&quot;,&quot;\\&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanGetSingleNewLineSymbol(&quot;e x=\&quot;\\t\&quot;&quot;,&quot;\t&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanGetSingleNewLineSymbol(&quot;e x=\'\\t\'&quot;,&quot;\t&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanGetSingleNewLineSymbol(&quot;e x=\&quot;\\r\&quot;&quot;,&quot;\r&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanGetSingleNewLineSymbol(&quot;e x=\'\\r\'&quot;,&quot;\r&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanGetSingleNewLineSymbol(&quot;e x=\&quot;\\n\&quot;&quot;,&quot;\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanGetSingleNewLineSymbol(&quot;e x=\'\\n\'&quot;,&quot;\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CannotUseExtraBeginExpressions" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CannotUseExtraEndExpressions" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CannotUseNestedIfBrokenBrakesExpression" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanParse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanProcessExtraTabs" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanSkipCommentary" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanSkipMultipleSpaces" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanUseAnonAttributeNamespace" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanUseAttributeNamespace" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanUseElementNamespace" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanUseEscapedCharacters" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanUseExprecssionAsAnonAttribute" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanUseExpression" executed="True" result="Failure" success="False" time="0.001" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 23 but was 25. Strings differ at index 1.
  Expected: "(\nnested (expression)\n)"
  But was:  "(\r\nnested (expression)\r\n)"
  -------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanUseExpression () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanUseMultiLineStringAsAnonAttribute" executed="True" result="Failure" success="False" time="0.001" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 14 but was 16. Strings differ at index 1.
  Expected: "1\n2 ' ''' ""\n3"
  But was:  "1\r\n2 ' ''' ""\r\n3"
  -------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanUseMultiLineStringAsAnonAttribute () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanUseMultiLineStringAsAttributeName" executed="True" result="Error" success="False" time="0.001" asserts="0">
                            <failure>
                              <message><![CDATA[System.NullReferenceException : Object reference not set to an instance of an object]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanUseMultiLineStringAsAttributeName () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanUseMultiLineStringAsAttributeValue" executed="True" result="Failure" success="False" time="0.001" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 11 but was 12. Strings differ at index 6.
  Expected: "qwerty\nasdf"
  But was:  "qwerty\r\nasdf"
  ------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanUseMultiLineStringAsAttributeValue () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanUseNestedDifferentBrakesExpression" executed="True" result="Failure" success="False" time="0.001" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 29 but was 31. Strings differ at index 1.
  Expected: "(\nnested (expression[x{2}])\n)"
  But was:  "(\r\nnested (expression[x{2}])\r\n)"
  -------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanUseNestedDifferentBrakesExpression () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanUseOptions" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanUseSingleLineStringAsAnonAttribute" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanUseSingleLineStringAsAttributeName" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanUseSingleLineStringAsAttributeValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanUseTextContentMultilineString" executed="True" result="Failure" success="False" time="0.000" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 17 but was 18. Strings differ at index 7.
  Expected: "qwerty'\n\t: 'ololo"
  But was:  "qwerty'\r\n\t: 'ololo"
  -------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanUseTextContentMultilineString () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanUseTextContentSimpleLiteral" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanUseTextContentWithAttributes" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanUseTextContentWithChildElements" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.CanUseUseEmptyStringInAttributeValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.DisableDoubledAttributesWithOption" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.DisableRootAttributesWithOption" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-suite type="ParameterizedTest" name="ErrorOnInvalidExpressions" executed="True" result="Success" success="True" time="0.012" asserts="0">
                            <results>
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.ErrorOnInvalidExpressions(&quot;a (fun(x){return x*2;}})&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.ErrorOnInvalidExpressions(&quot;a (fun(x{return x*2;})&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.ErrorOnInvalidExpressions(&quot;a (fun(x)return x*2;})&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.ErrorOnInvalidExpressions(&quot;a (fun(x){return x*2;)&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.ErrorOnInvalidExpressions(&quot;e (a)+[b]&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.ErrorOnInvalidExpressions(&quot;e (a)+(b)&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.ErrorOnInvalidExpressions(&quot;e (a})&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.ErrorOnInvalidExpressions(&quot;e ({a)&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.ErrorOnInvalidExpressions(&quot;e (a])&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.ErrorOnInvalidExpressions(&quot;e ([a)&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.ErrorOnInvalidExpressions(&quot;e ((a)&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.ErrorOnInvalidExpressions(&quot;e (a))&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="HardTest" executed="True" result="Success" success="True" time="0.019" asserts="0">
                            <results>
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.HardTest(&quot;presentation_ocm_structure.hql&quot;)" executed="True" result="Success" success="True" time="0.010" asserts="0" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.HardTest(&quot;demo.import.forms.m600.bxls&quot;)" executed="True" result="Success" success="True" time="0.007" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="KeepLeadingBraceInAnoExpressions" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.KeepLeadingBraceInAnoExpressions(&quot;a (((a)))&quot;,&quot;(((a)))&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="KeepLeadingBraceInAttrValExpressions" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.KeepLeadingBraceInAttrValExpressions(&quot;a code=(((a)))&quot;,&quot;(((a)))&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.MustBeParsed" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.NameAnonymAfterNoAnyNamed" executed="True" result="Failure" success="False" time="0.000" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 53 but was 55. Strings differ at index 6.
  Expected: "<root>\n  <e code='c' id='c' name='n' x='1' />\n</root>"
  But was:  "<root>\r\n  <e code='c' id='c' name='n' x='1' />\r\n</root>"
  ------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Bxl.BxlParserTests.NameAnonymAfterNoAnyNamed () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.NamedAttributesExceptIdentityBreaksIdentityStack" executed="True" result="Failure" success="False" time="0.000" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 130 but was 134. Strings differ at index 6.
  Expected: "<root>\n  <a code='x' id='x' name='y' z='1' b='1' />\n  <a b='1..."
  But was:  "<root>\r\n  <a code='x' id='x' name='y' z='1' b='1' />\r\n  <a b=..."
  ------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Bxl.BxlParserTests.NamedAttributesExceptIdentityBreaksIdentityStack () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.NotOverrideId" executed="True" result="Failure" success="False" time="0.000" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 53 but was 55. Strings differ at index 6.
  Expected: "<root>\n  <e id='1' code='c' name='n' x='1' />\n</root>"
  But was:  "<root>\r\n  <e id='1' code='c' name='n' x='1' />\r\n</root>"
  ------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Bxl.BxlParserTests.NotOverrideId () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-suite type="ParameterizedTest" name="ParsesValidExpressions" executed="True" result="Success" success="True" time="0.006" asserts="0">
                            <results>
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.ParsesValidExpressions(&quot;a (fun(x){return x*2;})&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.ParsesValidExpressions(&quot;a ((a+b)+ [b+c])&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.ParsesValidExpressions(&quot;a ((a+b)+(b+c))&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.ParsesValidExpressions(&quot;a (((a+b)))&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.ParsesValidExpressions(&quot;a (((a)))&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.PreventNameAnonymAfterAnyNamed" executed="True" result="Failure" success="False" time="0.000" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 50 but was 52. Strings differ at index 6.
  Expected: "<root>\n  <e code='c' id='c' x='1' n='1' />\n</root>"
  But was:  "<root>\r\n  <e code='c' id='c' x='1' n='1' />\r\n</root>"
  ------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Bxl.BxlParserTests.PreventNameAnonymAfterAnyNamed () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.PreventNameAnonymAfterAnyNamedWithoutCode" executed="True" result="Failure" success="False" time="0.000" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 34 but was 36. Strings differ at index 6.
  Expected: "<root>\n  <e x='1' n='1' />\n</root>"
  But was:  "<root>\r\n  <e x='1' n='1' />\r\n</root>"
  ------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Bxl.BxlParserTests.PreventNameAnonymAfterAnyNamedWithoutCode () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.TryFindBug" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.ValidlyParsesEmptyStrings" executed="True" result="Failure" success="False" time="0.001" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 58 but was 61. Strings differ at index 6.
  Expected: "<root>\n  <x x='' y='' z='' a=''></x>\n  <y a='1' />\n</root>"
  But was:  "<root>\r\n  <x x='' y='' z='' a=''></x>\r\n  <y a='1' />\r\n</root>"
  ------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Bxl.BxlParserTests.ValidlyParsesEmptyStrings () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.Bxl.BxlParserTests.ValidlyParsesEmptyStringsBasis" executed="True" result="Failure" success="False" time="0.001" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 163 but was 170. Strings differ at index 6.
  Expected: "<root>\n  <n code='g' id='g'>\n    <f code='s' id='s' name='X'>..."
  But was:  "<root>\r\n  <n code='g' id='g'>\r\n    <f code='s' id='s' name='X..."
  ------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Bxl.BxlParserTests.ValidlyParsesEmptyStringsBasis () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="bxl_serializer_test" executed="True" result="Success" success="True" time="0.007" asserts="0">
                    <results>
                      <test-case name="Qorpent.Serialization.Tests.bxl_serializer_test.large_strings" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.bxl_serializer_test.obj_to_bxl_test" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ChartExtensionsTests" executed="True" result="Success" success="True" time="0.015" asserts="0">
                    <results>
                      <test-case name="Qorpent.Serialization.Tests.ChartExtensionsTests.CanAddElement" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Charts" executed="True" result="Success" success="True" time="0.061" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ChartExtensionsTests" executed="True" result="Success" success="True" time="0.060" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.Charts.ChartExtensionsTests.CanConvertToBrickDataset" executed="True" result="Success" success="True" time="0.019" asserts="10" />
                          <test-case name="Qorpent.Serialization.Tests.Charts.ChartExtensionsTests.CanConvertToBrickDatasetAndBack" executed="True" result="Success" success="True" time="0.038" asserts="11" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="coverage_only_tests" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="Qorpent.Serialization.Tests.coverage_only_tests.serializer_throws_nullarg_for_output" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DefaultSelectorTests" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="Qorpent.Serialization.Tests.DefaultSelectorTests.CanLoadUnifiedSelectorImplFromContainer" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Dot" executed="True" result="Failure" success="False" time="0.069" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ColorTest" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.Dot.ColorTest.CanSumColorAndDouble" executed="True" result="Success" success="True" time="0.005" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="DotLanguageUtilsTest" executed="True" result="Success" success="True" time="0.025" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="AttributeValueTest" executed="True" result="Success" success="True" time="0.013" asserts="0">
                            <results>
                              <test-case name="Qorpent.Serialization.Tests.Dot.DotLanguageUtilsTest.AttributeValueTest(&quot;withURLandplusAndUnicode&quot;,&quot;http://x/?a=v+v&amp;name=\x0440\x0443\x0441&quot;,&quot;\&quot;http://x/?a=v%2Bv&amp;amp;name=&amp;#1088;&amp;#1091;&amp;#1089;\&quot;&quot;)" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Dot.DotLanguageUtilsTest.AttributeValueTest(&quot;withURLandplus&quot;,&quot;http://x/?a=v+v&quot;,&quot;\&quot;http://x/?a=v%2Bv\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Dot.DotLanguageUtilsTest.AttributeValueTest(&quot;withURL&quot;,&quot;http://x/?a=v v&quot;,&quot;\&quot;http://x/?a=v%20v\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Dot.DotLanguageUtilsTest.AttributeValueTest(&quot;non_u_r_l&quot;,&quot;http://x/?a=v v&quot;,&quot;\&quot;http://x/?a=v v\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Dot.DotLanguageUtilsTest.AttributeValueTest(&quot;unicode&quot;,&quot;\x0440\x0443\x0441&quot;,&quot;\&quot;&amp;#1088;&amp;#1091;&amp;#1089;\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Dot.DotLanguageUtilsTest.AttributeValueTest(&quot;nliteral&quot;,&quot;1_ab1_c&quot;,&quot;\&quot;1_ab1_c\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Dot.DotLanguageUtilsTest.AttributeValueTest(&quot;literal&quot;,&quot;_ab1_c&quot;,&quot;_ab1_c&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Dot.DotLanguageUtilsTest.AttributeValueTest(&quot;double&quot;,0.23d,&quot;0.23&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Dot.DotLanguageUtilsTest.AttributeValueTest(&quot;bool2&quot;,False,&quot;false&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Dot.DotLanguageUtilsTest.AttributeValueTest(&quot;bool&quot;,True,&quot;true&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Dot.DotLanguageUtilsTest.AttributeValueTest(&quot;int&quot;,1,&quot;1&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CodeUnEscaping" executed="True" result="Success" success="True" time="0.008" asserts="0">
                            <results>
                              <test-case name="Qorpent.Serialization.Tests.Dot.DotLanguageUtilsTest.CodeUnEscaping(&quot;a,b&gt;c&quot;,&quot;a_0x002Cb_0x003Ec&quot;)" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Dot.DotLanguageUtilsTest.CodeUnEscaping(&quot;a,b&quot;,&quot;a_0x002Cb&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Dot.DotLanguageUtilsTest.CodeUnEscaping(&quot;1a&quot;,&quot;_0x0031a&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Dot.DotLanguageUtilsTest.CodeUnEscaping(&quot;_a1&quot;,&quot;_a1&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Dot.DotLanguageUtilsTest.CodeUnEscaping(&quot;a1&quot;,&quot;a1&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Dot.DotLanguageUtilsTest.CodeUnEscaping(&quot;a\x0420\x0443\x0441&quot;,&quot;a\x0420\x0443\x0441&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="Qorpent.Serialization.Tests.Dot.DotLanguageUtilsTest.UnderlineCanStartLiteral" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="DotRenderTest" executed="True" result="Failure" success="False" time="0.023" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.Dot.DotRenderTest.EmptyGraph" executed="True" result="Failure" success="False" time="0.008" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 17 but was 19. Strings differ at index 14.
  Expected: "digraph test {\n}\n"
  But was:  "digraph test {\r\n}\r\n"
  --------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Dot.DotRenderTest.EmptyGraph () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.Dot.DotRenderTest.ShapedAndColorizedGraph" executed="True" result="Failure" success="False" time="0.008" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 226 but was 231. Strings differ at index 14.
  Expected: "digraph test {\n\ta [label=a;shape=box;style="bold,dashed,strip..."
  But was:  "digraph test {\r\n\ta [label=a;shape=box;style="bold,dashed,stri..."
  --------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Dot.DotRenderTest.ShapedAndColorizedGraph () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.Dot.DotRenderTest.SimpleGraphNodes" executed="True" result="Failure" success="False" time="0.002" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 90 but was 95. Strings differ at index 14.
  Expected: "digraph test {\n\t_0x0031a [label="1a";];\n\t_0x0031b [label="1b"..."
  But was:  "digraph test {\r\n\t_0x0031a [label="1a";];\r\n\t_0x0031b [label="1..."
  --------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Dot.DotRenderTest.SimpleGraphNodes () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                          <test-case name="Qorpent.Serialization.Tests.Dot.DotRenderTest.SimpleGraphNoNodes" executed="True" result="Failure" success="False" time="0.001" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected string length 26 but was 29. Strings differ at index 14.
  Expected: "digraph test {\n\ta -> b;\n}\n"
  But was:  "digraph test {\r\n\ta -> b;\r\n}\r\n"
  --------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Dot.DotRenderTest.SimpleGraphNoNodes () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TuningTest" executed="True" result="Success" success="True" time="0.009" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.Dot.TuningTest.AutoGenerateSubgraph" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.Dot.TuningTest.CorrectClusterCodes" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                          <test-case name="Qorpent.Serialization.Tests.Dot.TuningTest.EdgeDirTest" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-suite type="ParameterizedTest" name="LTailOrHeadEdgeCauseCompundGraph" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="Qorpent.Serialization.Tests.Dot.TuningTest.LTailOrHeadEdgeCauseCompundGraph(False)" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                              <test-case name="Qorpent.Serialization.Tests.Dot.TuningTest.LTailOrHeadEdgeCauseCompundGraph(True)" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                            </results>
                          </test-suite>
                          <test-case name="Qorpent.Serialization.Tests.Dot.TuningTest.PushNodesToClusters" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EscaperTests" executed="True" result="Success" success="True" time="0.074" asserts="0">
                    <results>
                      <test-suite type="ParameterizedTest" name="TestBxlLiteralEscaping" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestBxlLiteralEscaping(&quot;\x221Aunicodesymbols;\x221E&quot;,&quot;\x221Aunicodesymbols;\x221E&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestBxlLiteralEscaping(&quot;=equals=&quot;,&quot;__EQ__equals__EQ__&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestBxlLiteralEscaping(&quot;quo\&quot;te&quot;,&quot;quo__QUOT__te&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="TestBxlLiteralUnescaping" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestBxlLiteralUnescaping(&quot;\x221Aunicodesymbols;\x221E&quot;,&quot;\x221Aunicodesymbols;\x221E&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestBxlLiteralUnescaping(&quot;=equals=&quot;,&quot;__EQ__equals__EQ__&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestBxlLiteralUnescaping(&quot;quo\&quot;te&quot;,&quot;quo__QUOT__te&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="TestCheckingLiteral" executed="True" result="Success" success="True" time="0.012" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestCheckingLiteral(':',BxlLiteral,True,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestCheckingLiteral('1',BxlLiteral,True,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestCheckingLiteral('.',BxlLiteral,True,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestCheckingLiteral('q',BxlLiteral,True,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestCheckingLiteral('&amp;',XmlAttribute,True,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestCheckingLiteral('1',XmlAttribute,True,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestCheckingLiteral('.',XmlAttribute,True,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestCheckingLiteral('q',XmlAttribute,True,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestCheckingLiteral('&amp;',XmlName,True,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestCheckingLiteral('&amp;',XmlName,False,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestCheckingLiteral('1',XmlName,True,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestCheckingLiteral('1',XmlName,False,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestCheckingLiteral('.',XmlName,True,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestCheckingLiteral('.',XmlName,False,True)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestCheckingLiteral('q',XmlName,True,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="TestCheckingLiterals" executed="True" result="Success" success="True" time="0.008" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestCheckingLiterals(&quot;qwe:rty&quot;,BxlLiteral,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestCheckingLiterals(&quot;qwerty&quot;,BxlLiteral,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestCheckingLiterals(&quot;qw&amp;erty&quot;,XmlAttribute,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestCheckingLiterals(&quot;qwerty&quot;,XmlAttribute,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestCheckingLiterals(&quot;qwe&amp;rty&quot;,XmlName,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestCheckingLiterals(&quot;.qwerty&quot;,XmlName,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestCheckingLiterals(&quot;qwerty&quot;,XmlName,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="TestDotLiteralEscaping" executed="True" result="Success" success="True" time="0.006" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestDotLiteralEscaping(&quot;_under_score_&quot;,&quot;_under_score_&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestDotLiteralEscaping(&quot;2firstnumber&quot;,&quot;_0x0032firstnumber&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestDotLiteralEscaping(&quot;p!u\&quot;n#c$t%u&amp;a\'t(i)o*n&quot;,&quot;p_0x0021u_0x0022n_0x0023c_0x0024t_0x0025u_0x0026a_0x0027t_0x0028i_0x0029o_0x002An&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestDotLiteralEscaping(&quot;num1ber&quot;,&quot;num1ber&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="TestDotLiteralUnscaping" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestDotLiteralUnscaping(&quot;_under_score_&quot;,&quot;_under_score_&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestDotLiteralUnscaping(&quot;2firstnumber&quot;,&quot;_0x0032firstnumber&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestDotLiteralUnscaping(&quot;p!u\&quot;n#c$t%u&amp;a\'t(i)o*n&quot;,&quot;p_0x0021u_0x0022n_0x0023c_0x0024t_0x0025u_0x0026a_0x0027t_0x0028i_0x0029o_0x002An&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestDotLiteralUnscaping(&quot;num1ber&quot;,&quot;num1ber&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="TestJsonLiteralEscaping" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestJsonLiteralEscaping(&quot;\x221Aunicodesymbols;\x221E&quot;,&quot;\\u221Aunicodesymbols;\\u221E&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestJsonLiteralEscaping(&quot;2firstnumber&quot;,&quot;2firstnumber&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestJsonLiteralEscaping(&quot;p!u\&quot;n#c$t%u&amp;a\'t(i)o*n&quot;,&quot;p!u__QUOT__n#c$t%u&amp;a\'t(i)o*n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestJsonLiteralEscaping(&quot;back\\slash&quot;,&quot;back__BSLASH__slash&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="TestJsonLiteralUnscaping" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestJsonLiteralUnscaping(&quot;\x221Aunicodesymbols;\x221E&quot;,&quot;\\u221Aunicodesymbols;\\u221E&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestJsonLiteralUnscaping(&quot;2firstnumber&quot;,&quot;2firstnumber&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestJsonLiteralUnscaping(&quot;p!u\&quot;n#c$t%u&amp;a\'t(i)o*n&quot;,&quot;p!u__QUOT__n#c$t%u&amp;a\'t(i)o*n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestJsonLiteralUnscaping(&quot;back\\slash&quot;,&quot;back__BSLASH__slash&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="TestXmlAttributeEscaping" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestXmlAttributeEscaping(&quot;\x221Aunicodesymbols;\x221E&quot;,&quot;&amp;#x221A;unicodesymbols;&amp;#x221E;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestXmlAttributeEscaping(&quot;&amp;amp&amp;rsand&amp;&quot;,&quot;&amp;amp;amp&amp;amp;rsand&amp;amp;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestXmlAttributeEscaping(&quot;quo\&quot;te&quot;,&quot;quo&amp;quot;te&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="TestXmlAttributeUnescaping" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestXmlAttributeUnescaping(&quot;\x221Aunicodesymbols;\x221E&quot;,&quot;&amp;#x221A;unicodesymbols;&amp;#x221E;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestXmlAttributeUnescaping(&quot;&amp;amp&amp;rsand&amp;&quot;,&quot;&amp;amp;amp&amp;amp;rsand&amp;amp;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestXmlAttributeUnescaping(&quot;quo\&quot;te&quot;,&quot;quo&amp;quot;te&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="TestXmlNameEscaping" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestXmlNameEscaping(&quot;\x221Aunicode__symbols\x221E&quot;,&quot;__0x221A__unicode__symbols__0x221E__&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestXmlNameEscaping(&quot;!a*&quot;,&quot;__EXC__a__STAR__&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestXmlNameEscaping(&quot;\x0440\x0443\x0441\x0441\x043A\x043E\x0435&quot;,&quot;\x0440\x0443\x0441\x0441\x043A\x043E\x0435&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestXmlNameEscaping(&quot;.leaddot&quot;,&quot;__DOT__leaddot&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestXmlNameEscaping(&quot;in.dot&quot;,&quot;in.dot&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestXmlNameEscaping(&quot;-leaddefis&quot;,&quot;__MINUS__leaddefis&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestXmlNameEscaping(&quot;1leaddec&quot;,&quot;_1leaddec&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestXmlNameEscaping(&quot;in1dec&quot;,&quot;in1dec&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestXmlNameEscaping(&quot;in-minus&quot;,&quot;in-minus&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="TestXmlNameUnEscaping" executed="True" result="Success" success="True" time="0.006" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestXmlNameUnEscaping(&quot;\x221Aunicode__symbol\x221E&quot;,&quot;__0x221A__unicode__symbol__0x221E__&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestXmlNameUnEscaping(&quot;\x221Aunicode__symbols\x221E&quot;,&quot;__0x221A__unicode__symbols__0x221E__&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestXmlNameUnEscaping(&quot;!a*&quot;,&quot;__EXC__a__STAR__&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestXmlNameUnEscaping(&quot;\x0440\x0443\x0441\x0441\x043A\x043E\x0435&quot;,&quot;\x0440\x0443\x0441\x0441\x043A\x043E\x0435&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestXmlNameUnEscaping(&quot;.leaddot&quot;,&quot;__DOT__leaddot&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestXmlNameUnEscaping(&quot;in.dot&quot;,&quot;in.dot&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestXmlNameUnEscaping(&quot;-leaddefis&quot;,&quot;__MINUS__leaddefis&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestXmlNameUnEscaping(&quot;1leaddec&quot;,&quot;_1leaddec&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestXmlNameUnEscaping(&quot;in1dec&quot;,&quot;in1dec&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.EscaperTests.TestXmlNameUnEscaping(&quot;in-defis&quot;,&quot;in-defis&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="exceptions_need_to_be_fixed" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="Qorpent.Serialization.Tests.exceptions_need_to_be_fixed.bug_bxl_serializer_must_correctly_serilize_nulls" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="GraphTests" executed="True" result="Success" success="True" time="0.008" asserts="0">
                    <results>
                      <test-case name="Qorpent.Serialization.Tests.GraphTests.CalculateEdgeInWeight" executed="True" result="Success" success="True" time="0.005" asserts="4" />
                      <test-case name="Qorpent.Serialization.Tests.GraphTests.CalculateEdgeInWeightWithRecycles" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="iocconfiguationtest" executed="True" result="Success" success="True" time="0.064" asserts="0">
                    <results>
                      <test-suite type="ParameterizedTest" name="ClassesAreWellConfigured" executed="True" result="Success" success="True" time="0.063" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.iocconfiguationtest.ClassesAreWellConfigured(Qorpent.Serialization.ISerializer,&quot;md5.serializer&quot;,Qorpent.Serialization.Md5Serializer)" executed="True" result="Success" success="True" time="0.009" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.iocconfiguationtest.ClassesAreWellConfigured(Qorpent.Serialization.ISerializer,&quot;json.serializer&quot;,Qorpent.Serialization.JsonSerializer)" executed="True" result="Success" success="True" time="0.010" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.iocconfiguationtest.ClassesAreWellConfigured(Qorpent.Serialization.ISerializer,&quot;js.serializer&quot;,Qorpent.Serialization.JsSerializer)" executed="True" result="Success" success="True" time="0.008" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.iocconfiguationtest.ClassesAreWellConfigured(Qorpent.Serialization.ISerializer,&quot;xml.serializer&quot;,Qorpent.Serialization.XmlSerializer)" executed="True" result="Success" success="True" time="0.010" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.iocconfiguationtest.ClassesAreWellConfigured(Qorpent.Serialization.ISerializer,&quot;bxl.serializer&quot;,Qorpent.Serialization.BxlSerializer)" executed="True" result="Success" success="True" time="0.010" asserts="2" />
                          <test-case name="Qorpent.Serialization.Tests.iocconfiguationtest.ClassesAreWellConfigured(Qorpent.Serialization.ISerializerFactory,null,Qorpent.Serialization.DefaultSerializerFactory)" executed="True" result="Success" success="True" time="0.008" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="js_serializer_test" executed="True" result="Success" success="True" time="0.033" asserts="0">
                    <results>
                      <test-case name="Qorpent.Serialization.Tests.js_serializer_test.anonymous_supported" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.js_serializer_test.array_serialized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.js_serializer_test.bool_serialized" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="Qorpent.Serialization.Tests.js_serializer_test.BUG_cannot_process_xelement_with_multiple_items" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.js_serializer_test.bug_donot_escape_literals_with_dots_and_spaces" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="Qorpent.Serialization.Tests.js_serializer_test.camel_case_used" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.js_serializer_test.can_force_array_on_specially_marked_elements" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.js_serializer_test.can_process_xelement" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.js_serializer_test.complex_class_with_attributes_processed" executed="True" result="Success" success="True" time="0.002" asserts="4" />
                      <test-case name="Qorpent.Serialization.Tests.js_serializer_test.complex_class_with_dictionary_and_array_serialized" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.js_serializer_test.datetime_serialized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.js_serializer_test.dictionary_serialized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.js_serializer_test.double_float_decimal_serialized" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="Qorpent.Serialization.Tests.js_serializer_test.enum_serialized" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="Qorpent.Serialization.Tests.js_serializer_test.int_and_long_serialized" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="Qorpent.Serialization.Tests.js_serializer_test.js_raw_supported" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.js_serializer_test.nested_objects_in_anonymous_classes_are_serialized" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.js_serializer_test.null_serialized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.js_serializer_test.string_escaped_and_serialized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.js_serializer_test.string_escaped_CRLFT_and_serialized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.js_serializer_test.string_serialized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Json" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AF768Tests" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.Json.AF768Tests.ItsNotReproducedNow" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="Qorpent.Serialization.Tests.Json.AF768Tests.SimpleJsonObjectToXml" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="Qorpent.Serialization.Tests.Json.AF768Tests.SimpleJsonToXml" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="InvalidXmlToJson" executed="True" result="Success" success="True" time="0.008" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.Json.InvalidXmlToJson.IncorrectSerializingListOfObjects" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Json.InvalidXmlToJson.NoTrailCommas" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Json.InvalidXmlToJson.ReproduceBadParseOfSpecification" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="json_serializer_test" executed="True" result="Success" success="True" time="0.022" asserts="0">
                    <results>
                      <test-case name="Qorpent.Serialization.Tests.json_serializer_test.array_serialized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.json_serializer_test.array_serialized_string_with_quots" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.json_serializer_test.bool_serialized" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="Qorpent.Serialization.Tests.json_serializer_test.camel_case_used" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.json_serializer_test.can_process_xelement" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.json_serializer_test.complex_class_with_attributes_processed" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                      <test-case name="Qorpent.Serialization.Tests.json_serializer_test.complex_class_with_dictionary_and_array_serialized" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.json_serializer_test.datetime_serialized" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.json_serializer_test.dictionary_serialized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.json_serializer_test.double_float_decimal_serialized" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="Qorpent.Serialization.Tests.json_serializer_test.enum_serialized" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="Qorpent.Serialization.Tests.json_serializer_test.int_and_long_serialized" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="Qorpent.Serialization.Tests.json_serializer_test.nested_objects_in_anonymous_classes_are_serialized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.json_serializer_test.null_serialized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.json_serializer_test.string_escaped_and_serialized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.json_serializer_test.string_escaped_CRLFT_and_serialized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.json_serializer_test.string_serialized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Q18_Xml_To_Json_Bug_Test" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="Qorpent.Serialization.Tests.Q18_Xml_To_Json_Bug_Test.Q18_Not_Reproduced_Yet" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.Q18_Xml_To_Json_Bug_Test.Q19_Small_Test" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.Q18_Xml_To_Json_Bug_Test.Small_Test" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Q48SerializeNotNullCollectionsTest" executed="True" result="Success" success="True" time="0.006" asserts="0">
                    <results>
                      <test-suite type="ParameterizedTest" name="TestSerialization" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.Q48SerializeNotNullCollectionsTest.TestSerialization(0,0,0,&quot;{}&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Q48SerializeNotNullCollectionsTest.TestSerialization(1,1,1,&quot;{}&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Q48SerializeNotNullCollectionsTest.TestSerialization(2,2,2,&quot;{\'Ar\': [\'test\'], \'Lst\': [\'test\'], \'Dct\': {\'test\': \'test\'}}&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Q51JsonXmlParserFail" executed="True" result="Success" success="True" time="0.014" asserts="0">
                    <results>
                      <test-suite type="ParameterizedTest" name="TestArrayParsing" executed="True" result="Success" success="True" time="0.014" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.Q51JsonXmlParserFail.TestArrayParsing(&quot;{x:[{y:1},2]}&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="Qorpent.Serialization.Tests.Q51JsonXmlParserFail.TestArrayParsing(&quot;{x:[\'1\',\'2\&quot;\']}&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="Qorpent.Serialization.Tests.Q51JsonXmlParserFail.TestArrayParsing(&quot;{x:[\'1\',\'2\\\&quot;\']}&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="Qorpent.Serialization.Tests.Q51JsonXmlParserFail.TestArrayParsing(&quot;{x:[\'1\',\'2\']}&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="Qorpent.Serialization.Tests.Q51JsonXmlParserFail.TestArrayParsing(&quot;{x:[1,2]}&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="Qorpent.Serialization.Tests.Q51JsonXmlParserFail.TestArrayParsing(&quot;{\'x\':[1,2]}&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="Qorpent.Serialization.Tests.Q51JsonXmlParserFail.TestArrayParsing(&quot;[{x:\&quot;1\&quot;},{y:\&quot;2\&quot;}]&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="Qorpent.Serialization.Tests.Q51JsonXmlParserFail.TestArrayParsing(&quot;[{x:\'1\'},{y:\'2\'}]&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="Qorpent.Serialization.Tests.Q51JsonXmlParserFail.TestArrayParsing(&quot;[1,2]&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="Qorpent.Serialization.Tests.Q51JsonXmlParserFail.TestArrayParsing(&quot;\n\t\t{\n\n\t\'actions\' : [\n\t\t{\n\t\t\t\'actiontype\' : \'select\',\n\t\t\t\'code\' : \'title\',\n\t\t\t\'selector\' : \'#title\',\n\t\t},\n],\n\t\n}&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="Qorpent.Serialization.Tests.Q51JsonXmlParserFail.TestArrayParsing(&quot;\n\t\t{\n\t\'in\' : \'content\',\n\t\n}&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="Qorpent.Serialization.Tests.Q51JsonXmlParserFail.TestArrayParsing(&quot;\n\t\t{\n\t\t\ta : [1,2,],\n\t\t}&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="Qorpent.Serialization.Tests.Q51JsonXmlParserFail.TestArrayParsing(&quot;\n{\n\ta : [1,2]\n}&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="Qorpent.Serialization.Tests.Q51JsonXmlParserFail.TestArrayParsing(&quot;{\n\t\'in\' : \'content\',\n\t\'type\' : \'text\',\n\t\'actions\' : [\n\t\t{\n\t\t\t\'actiontype\' : \'select\',\n\t\t\t\'code\' : \'title\',\n\t\t\t\'selector\' : \'#title\',\n\t\t},\n\t\t{\n\t\t\t\'actiontype\' : \'select\',\n\t\t\t\'code\' : \'date\',\n\t\t\t\'selector\' : \'.data\',\n\t\t},\n\t\t{\n\t\t\t\'actiontype\' : \'select\',\n\t\t\t\'code\' : \'text\',\n\t\t\t\'selector\' : \'#content\',\n\t\t\t\'type\': \'xml\'\n\t\t},\n\t]\n}&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Selector_Tests" executed="True" result="Success" success="True" time="0.030" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="CssSelectorImplTests" executed="True" result="Success" success="True" time="0.015" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="CanSelect" executed="True" result="Success" success="True" time="0.014" asserts="0">
                            <results>
                              <test-case name="Qorpent.Serialization.Tests.Selector_Tests.CssSelectorImplTests.CanSelect(&quot;&lt;root&gt;\n    &lt;div class=\&quot;first\&quot;&gt;TRUE&lt;/div&gt;\n    &lt;div class=\&quot;first\&quot;&gt;BUZZ&lt;/div&gt;\n    &lt;div class=\&quot;first\&quot;&gt;NOT&lt;/div&gt;\n&lt;/root&gt;&quot;,&quot;div.first:nth-child(2)&quot;,System.String[],1)" executed="True" result="Success" success="True" time="0.006" asserts="2" />
                              <test-case name="Qorpent.Serialization.Tests.Selector_Tests.CssSelectorImplTests.CanSelect(&quot;&lt;root&gt;\n    &lt;div class=\&quot;first\&quot;&gt;TRUE&lt;/div&gt;\n    &lt;div class=\&quot;first\&quot;&gt;BUZZ&lt;/div&gt;\n    &lt;div class=\&quot;first\&quot;&gt;NOT&lt;/div&gt;\n&lt;/root&gt;&quot;,&quot;div.first:last-child&quot;,System.String[],1)" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                              <test-case name="Qorpent.Serialization.Tests.Selector_Tests.CssSelectorImplTests.CanSelect(&quot;&lt;root&gt;\n    &lt;div class=\&quot;first\&quot;&gt;TRUE&lt;/div&gt;\n    &lt;div class=\&quot;first\&quot;&gt;BUZZ&lt;/div&gt;\n    &lt;div class=\&quot;first\&quot;&gt;NOT&lt;/div&gt;\n&lt;/root&gt;&quot;,&quot;div.first:first-child&quot;,System.String[],1)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Qorpent.Serialization.Tests.Selector_Tests.CssSelectorImplTests.CanSelect(&quot;&lt;root&gt;\n    &lt;div class=\&quot; first second\&quot;&gt;TRUE&lt;/div&gt;\n    &lt;div class=\&quot;first\&quot;&gt;NOT&lt;/div&gt;\n    &lt;div class=\&quot;second\&quot;&gt;NOT&lt;/div&gt;\n&lt;/root&gt;&quot;,&quot;div.first.second&quot;,System.String[],1)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Qorpent.Serialization.Tests.Selector_Tests.CssSelectorImplTests.CanSelect(&quot;&lt;root&gt;\n    &lt;div class=\&quot; first second\&quot;&gt;TRUE&lt;/div&gt;\n    &lt;div class=\&quot;first\&quot;&gt;NOT&lt;/div&gt;\n    &lt;div class=\&quot;second\&quot;&gt;NOT&lt;/div&gt;\n&lt;/root&gt;&quot;,&quot;div.first&quot;,System.String[],2)" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="RegexSelectorImplTest" executed="True" result="Success" success="True" time="0.014" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="MainFeaturedTest" executed="True" result="Success" success="True" time="0.013" asserts="0">
                            <results>
                              <test-case name="Qorpent.Serialization.Tests.Selector_Tests.RegexSelectorImplTest.MainFeaturedTest(&quot;&lt;a&gt;&lt;b i=\'1\' id=\'xyy\'&gt;xxx&lt;/b&gt;&lt;b&gt;yyy&lt;/b&gt;&lt;b i=\'2\'&gt;xyy&lt;/b&gt;&lt;c&gt;xxx&lt;/c&gt;&lt;/a&gt;&quot;,&quot;xxx##+--c&quot;,&quot;&lt;c&gt;xxx&lt;/c&gt;&quot;)" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Selector_Tests.RegexSelectorImplTest.MainFeaturedTest(&quot;&lt;a&gt;&lt;b i=\'1\' id=\'xyy\'&gt;xxx&lt;/b&gt;&lt;b&gt;yyy&lt;/b&gt;&lt;b i=\'2\'&gt;xyy&lt;/b&gt;&lt;c&gt;xxx&lt;/c&gt;&lt;/a&gt;&quot;,&quot;xxx##+--!b&quot;,&quot;&lt;c&gt;xxx&lt;/c&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Selector_Tests.RegexSelectorImplTest.MainFeaturedTest(&quot;&lt;a&gt;&lt;b i=\'1\' id=\'xyy\'&gt;xxx&lt;/b&gt;&lt;b&gt;yyy&lt;/b&gt;&lt;b i=\'2\'&gt;xyy&lt;/b&gt;&lt;c&gt;xxx&lt;/c&gt;&lt;/a&gt;&quot;,&quot;xxx##+--!c&quot;,&quot;&lt;b i=\'1\' id=\'xyy\'&gt;xxx&lt;/b&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Selector_Tests.RegexSelectorImplTest.MainFeaturedTest(&quot;&lt;a&gt;&lt;b i=\'1\' id=\'xyy\'&gt;xxx&lt;/b&gt;&lt;b&gt;yyy&lt;/b&gt;&lt;b i=\'2\'&gt;xyy&lt;/b&gt;&lt;c&gt;xxx&lt;/c&gt;&lt;/a&gt;&quot;,&quot;xxx##+--b&quot;,&quot;&lt;b i=\'1\' id=\'xyy\'&gt;xxx&lt;/b&gt;&quot;)" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Selector_Tests.RegexSelectorImplTest.MainFeaturedTest(&quot;&lt;a&gt;&lt;b i=\'1\' id=\'xyy\'&gt;xxx&lt;/b&gt;&lt;b&gt;yyy&lt;/b&gt;&lt;b i=\'2\'&gt;xyy&lt;/b&gt;&lt;c&gt;xxx&lt;/c&gt;&lt;/a&gt;&quot;,&quot;xxx##+--b,c&quot;,&quot;&lt;b i=\'1\' id=\'xyy\'&gt;xxx&lt;/b&gt;;&lt;c&gt;xxx&lt;/c&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Selector_Tests.RegexSelectorImplTest.MainFeaturedTest(&quot;&lt;a&gt;&lt;b i=\'1\' id=\'xyy\'&gt;xxx&lt;/b&gt;&lt;b&gt;yyy&lt;/b&gt;&lt;b i=\'2\'&gt;xyy&lt;/b&gt;&lt;c&gt;xxx&lt;/c&gt;&lt;/a&gt;&quot;,&quot;xxx##+--!b,c&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Selector_Tests.RegexSelectorImplTest.MainFeaturedTest(&quot;&lt;a&gt;&lt;b i=\'1\' id=\'xyy\'&gt;xxx&lt;/b&gt;&lt;b&gt;yyy&lt;/b&gt;&lt;b i=\'2\'&gt;xyy&lt;/b&gt;&lt;c&gt;xxx&lt;/c&gt;&lt;/a&gt;&quot;,&quot;[^y]y+&quot;,&quot;&lt;b i=\'2\'&gt;xyy&lt;/b&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Selector_Tests.RegexSelectorImplTest.MainFeaturedTest(&quot;&lt;a&gt;&lt;b i=\'1\' id=\'xyy\'&gt;xxx&lt;/b&gt;&lt;b&gt;yyy&lt;/b&gt;&lt;b i=\'2\'&gt;xyy&lt;/b&gt;&lt;c&gt;xxx&lt;/c&gt;&lt;/a&gt;&quot;,&quot;[^y]y+##-+-&quot;,&quot;&lt;b i=\'1\' id=\'xyy\'&gt;xxx&lt;/b&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Qorpent.Serialization.Tests.Selector_Tests.RegexSelectorImplTest.MainFeaturedTest(&quot;&lt;a&gt;&lt;b i=\'1\' id=\'xyy\'&gt;xxx&lt;/b&gt;&lt;b&gt;yyy&lt;/b&gt;&lt;b i=\'2\'&gt;xyy&lt;/b&gt;&lt;c&gt;xxx&lt;/c&gt;&lt;/a&gt;&quot;,&quot;[^y]y+##++-&quot;,&quot;&lt;b i=\'1\' id=\'xyy\'&gt;xxx&lt;/b&gt;;&lt;b i=\'2\'&gt;xyy&lt;/b&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="serialization_set_test" executed="True" result="Success" success="True" time="0.014" asserts="0">
                    <results>
                      <test-case name="Qorpent.Serialization.Tests.serialization_set_test.bug_0_int_was_treated_as_serializable" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.serialization_set_test.can_retrieve_setting_from_interface" executed="True" result="Success" success="True" time="0.003" asserts="4" />
                      <test-case name="Qorpent.Serialization.Tests.serialization_set_test.ignore_items_are_ignored" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.serialization_set_test.not_nullable_final_fields_anp_properties_ignored_on_nulls" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                      <test-case name="Qorpent.Serialization.Tests.serialization_set_test.not_nullable_final_fields_anp_properties_not_ignored_if_not_nulls" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                      <test-case name="Qorpent.Serialization.Tests.serialization_set_test.not_serializable_classes_ignored_except_of_member_level_serialization_setted_on" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="Qorpent.Serialization.Tests.serialization_set_test.nullable_final_fields_anp_properties_always_occures" executed="True" result="Success" success="True" time="0.001" asserts="7" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Uson" executed="True" result="Failure" success="False" time="0.416" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="UsonMainTest" executed="True" result="Failure" success="False" time="0.414" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.Uson.UsonMainTest.ArrayByIndexTest" executed="True" result="Success" success="True" time="0.256" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Uson.UsonMainTest.ArrayByPushTest" executed="True" result="Success" success="True" time="0.022" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Uson.UsonMainTest.ArrayDefaults" executed="True" result="Success" success="True" time="0.009" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Uson.UsonMainTest.ArrayExtend" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Uson.UsonMainTest.CanCreateAndUse" executed="True" result="Success" success="True" time="0.051" asserts="7" />
                          <test-case name="Qorpent.Serialization.Tests.Uson.UsonMainTest.CanSupplyDefaultParameters" executed="True" result="Success" success="True" time="0.005" asserts="0" />
                          <test-case name="Qorpent.Serialization.Tests.Uson.UsonMainTest.Complex" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Uson.UsonMainTest.DeepDefaults" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Uson.UsonMainTest.DeepDefaultsWithAutoUson" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Uson.UsonMainTest.DeepExtend" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Uson.UsonMainTest.Defaults" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Uson.UsonMainTest.Extend" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Uson.UsonMainTest.FromDictionary" executed="True" result="Success" success="True" time="0.017" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Uson.UsonMainTest.FromJson" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Uson.UsonMainTest.IntToJson" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Uson.UsonMainTest.UsdJson" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.Uson.UsonMainTest.XmlRenderTest" executed="True" result="Failure" success="False" time="0.005" asserts="2">
                            <failure>
                              <message><![CDATA[  Expected string length 140 but was 147. Strings differ at index 14.
  Expected: "<result a="1">\n  <b x="x" c="2012-01-01T12:00:00" />\n  <d _ar..."
  But was:  "<result a="1">\r\n  <b x="x" c="2012-01-01T12:00:00" />\r\n  <d _..."
  --------------------------^
]]></message>
                              <stack-trace><![CDATA[at Qorpent.Serialization.Tests.Uson.UsonMainTest.XmlRenderTest () [0x00000] in <filename unknown>:0
]]></stack-trace>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="XHtml5XmlWriterTests" executed="True" result="Success" success="True" time="0.006" asserts="0">
                    <results>
                      <test-case name="Qorpent.Serialization.Tests.XHtml5XmlWriterTests.CanPreventAutoStyling" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.XHtml5XmlWriterTests.CanWrapXElementConent" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.XHtml5XmlWriterTests.CanWrapXElementConentWithHtmlDefinition" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.XHtml5XmlWriterTests.WroteElementsCorrectlyClosed" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="xml_serializer_test" executed="True" result="Success" success="True" time="0.033" asserts="0">
                    <results>
                      <test-case name="Qorpent.Serialization.Tests.xml_serializer_test.array_serialized" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.xml_serializer_test.array_serialized_anonym" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.xml_serializer_test.bool_serialized" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="Qorpent.Serialization.Tests.xml_serializer_test.bug_incorrect_element_placement" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.xml_serializer_test.bug_insuficient_nesting_in_xml_serialization" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.xml_serializer_test.complex_class_with_attributes_processed" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                      <test-case name="Qorpent.Serialization.Tests.xml_serializer_test.complex_class_with_dictionary_and_array_serialized" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.xml_serializer_test.datetime_serialized" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.xml_serializer_test.dictionary_serialized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.xml_serializer_test.double_float_decimal_serialized" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                      <test-case name="Qorpent.Serialization.Tests.xml_serializer_test.enum_serialized" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="Qorpent.Serialization.Tests.xml_serializer_test.int_and_long_serialized" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="Qorpent.Serialization.Tests.xml_serializer_test.null_serialized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.xml_serializer_test.string_escaped_and_serialized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.xml_serializer_test.string_escaped_CRLFT_and_serialized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.xml_serializer_test.string_serialized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.xml_serializer_test.try_to_catch_bug_with_nulls" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.xml_serializer_test.x_element_processed" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="XmlInclude" executed="True" result="Success" success="True" time="0.005" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Bug_XmlInterpolationInContainer" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.XmlInclude.Bug_XmlInterpolationInContainer.Can_Find_Interpolator_In_Container_After_Register" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="XmlJson2WayConversionTest" executed="True" result="Success" success="True" time="0.045" asserts="0">
                    <results>
                      <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.BugInEscapeInLiteral" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.BugInEscapeInLiteral2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="LiteralEquivalenceTranslation" executed="True" result="Success" success="True" time="0.008" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.LiteralEquivalenceTranslation(&quot;\&quot;str\\r\\n\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.LiteralEquivalenceTranslation(&quot;\&quot;str\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.LiteralEquivalenceTranslation(&quot;-1.22&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.LiteralEquivalenceTranslation(&quot;false&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.LiteralEquivalenceTranslation(&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.LiteralEquivalenceTranslation(&quot;\&quot;\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.LiteralEquivalenceTranslation(&quot;true&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.LiteralEquivalenceTranslation(&quot;1&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="Q156Bug" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.Q156Bug(&quot;{\n  \&quot;code\&quot;: \&quot;znak_com_test1\&quot;,\n  \&quot;group\&quot;: \&quot;znakcom\&quot;,\n  \&quot;hardscript\&quot;: \&quot;\&quot;,\n  \&quot;name\&quot;: \&quot;\x0417\x043D\x0430\x043A.\x043A\x043E\x043C\&quot;,\n  \&quot;source\&quot;:\&quot;znak.com\&quot;,\n  \&quot;samples\&quot;: [\n     \&quot;http://znak.com/svrdl/articles/16-09-19-53/101205.html\&quot;,\n     \&quot;http://znak.com/tumen/articles/16-09-20-26/101208.html\&quot;,\n     \&quot;http://znak.com/urfo/articles/16-09-19-56/101206.html\&quot;\n  ],\n  \&quot;script\&quot;: []\n}\n&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="Q157Bug" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.Q157Bug(&quot;{ \&quot;code\&quot; : \&quot;\&quot;, \&quot;group\&quot; : \&quot;\&quot;, \&quot;hardscript\&quot; : \&quot;\&quot;, \&quot;name\&quot; : \&quot;\&quot;, \&quot;RobotId\&quot; : \&quot;\&quot;, \&quot;source\&quot; : \&quot;\&quot;, \&quot;samples\&quot; : [\&quot;http://znak.com/svrdl/articles/16-09-19-53/101205.html\&quot;], \&quot;script\&quot; : [] }&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SimpleOneLevelArrayEquivalence" executed="True" result="Success" success="True" time="0.006" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.SimpleOneLevelArrayEquivalence(&quot;[true,null,\&quot;b\&quot;]&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.SimpleOneLevelArrayEquivalence(&quot;[\&quot;a\&quot;,\&quot;b\&quot;]&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.SimpleOneLevelArrayEquivalence(&quot;[1]&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.SimpleOneLevelArrayEquivalence(&quot;[1,2]&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.SimpleOneLevelArrayEquivalence(&quot;[]&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SimpleOneLevelObjectEquivalence" executed="True" result="Success" success="True" time="0.011" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.SimpleOneLevelObjectEquivalence(&quot;{\&quot;a\&quot;:1,\&quot;b\&quot;:\&quot;aa2\&quot;}&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.SimpleOneLevelObjectEquivalence(&quot;{\&quot;a\&quot;:1,\&quot;b\&quot;:2}&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.SimpleOneLevelObjectEquivalence(&quot;{\&quot;a\&quot;:true,\&quot;b\&quot;:false}&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.SimpleOneLevelObjectEquivalence(&quot;{\&quot;a\&quot;:null}&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.SimpleOneLevelObjectEquivalence(&quot;{\&quot;a\&quot;:\&quot;\&quot;}&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.SimpleOneLevelObjectEquivalence(&quot;{\&quot;a\&quot;:true}&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.SimpleOneLevelObjectEquivalence(&quot;{}&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SimpleTwoLevelArrayEquivalence" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.SimpleTwoLevelArrayEquivalence(&quot;[1,[1,2]]&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.SimpleTwoLevelArrayEquivalence(&quot;[[]]&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SimpleTwoLevelObject" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.SimpleTwoLevelObject(&quot;{\&quot;a\&quot;:{\&quot;c\&quot;:1},\&quot;b\&quot;:{\&quot;d\&quot;:2}}&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="Qorpent.Serialization.Tests.XmlJson2WayConversionTest.SimpleTwoLevelObject(&quot;{\&quot;a\&quot;:{}}&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>